{"ast":null,"code":"import _objectWithoutProperties from \"/home/sofiane/Desktop/Crop Nutrition Optimizer/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/home/sofiane/Desktop/Crop Nutrition Optimizer/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"style\", \"children\"];\nimport { upperFirst, capitalize, last, pick, compose, evolve, mapValues, matchPercent, isNil, get, castArray, omit, asyncCompose } from '@react-pdf/fns';\nimport * as P from '@react-pdf/primitives';\nimport { TextInstance } from '@react-pdf/primitives';\nimport stylesheet, { transformColor, processTransform, flatten } from '@react-pdf/stylesheet';\nimport layoutEngine, { bidi, linebreaker, justification, textDecoration, scriptItemizer, wordHyphenation } from '@react-pdf/textkit';\nimport { PDFFont } from '@react-pdf/pdfkit';\nimport * as Yoga from 'yoga-layout/load';\nimport { loadYoga as loadYoga$1 } from 'yoga-layout/load';\nimport emojiRegex from 'emoji-regex';\nimport resolveImage from '@react-pdf/image';\n\n/**\n * Create attributed string from text fragments\n *\n * @param {Object[]} fragments fragments\n * @returns {Object} attributed string\n */\nconst fromFragments = fragments => {\n  let offset = 0;\n  let string = '';\n  const runs = [];\n  fragments.forEach(fragment => {\n    string += fragment.string;\n    runs.push({\n      start: offset,\n      end: offset + fragment.string.length,\n      attributes: fragment.attributes || {}\n    });\n    offset += fragment.string.length;\n  });\n  return {\n    string,\n    runs\n  };\n};\n\n/**\n * Apply transformation to text string\n *\n * @param {string} text\n * @param {string} transformation type\n * @returns {string} transformed text\n */\nconst transformText = (text, transformation) => {\n  switch (transformation) {\n    case 'uppercase':\n      return text.toUpperCase();\n    case 'lowercase':\n      return text.toLowerCase();\n    case 'capitalize':\n      return capitalize(text);\n    case 'upperfirst':\n      return upperFirst(text);\n    default:\n      return text;\n  }\n};\n\n/* eslint-disable class-methods-use-this */\n\nclass StandardFont {\n  constructor(src) {\n    this.name = src;\n    this.src = PDFFont.open(null, src);\n  }\n  encode(str) {\n    return this.src.encode(str);\n  }\n  layout(str) {\n    const [encoded, positions] = this.encode(str);\n    return {\n      positions,\n      stringIndices: positions.map((_, i) => i),\n      glyphs: encoded.map((g, i) => {\n        const glyph = this.getGlyph(parseInt(g, 16));\n        glyph.advanceWidth = positions[i].advanceWidth;\n        return glyph;\n      })\n    };\n  }\n  glyphForCodePoint(codePoint) {\n    const glyph = this.getGlyph(codePoint);\n    glyph.advanceWidth = 400;\n    return glyph;\n  }\n  getGlyph(id) {\n    return {\n      id,\n      _font: this.src,\n      codePoints: [id],\n      isLigature: false,\n      name: this.src.font.characterToGlyph(id)\n    };\n  }\n  hasGlyphForCodePoint(codePoint) {\n    return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n  }\n\n  // Based on empirical observation\n  get ascent() {\n    return 900;\n  }\n\n  // Based on empirical observation\n  get capHeight() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return 650;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return 550;\n      default:\n        return 690;\n    }\n  }\n\n  // Based on empirical observation\n  get xHeight() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return 440;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return 390;\n      default:\n        return 490;\n    }\n  }\n\n  // Based on empirical observation\n  get descent() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return -220;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return -230;\n      default:\n        return -200;\n    }\n  }\n  get lineGap() {\n    return 0;\n  }\n  get unitsPerEm() {\n    return 1000;\n  }\n}\nconst fontCache = {};\nconst IGNORED_CODE_POINTS = [173];\nconst getFontSize = node => node.attributes.fontSize || 12;\nconst getOrCreateFont = name => {\n  if (fontCache[name]) return fontCache[name];\n  const font = new StandardFont(name);\n  fontCache[name] = font;\n  return font;\n};\nconst getFallbackFont = () => getOrCreateFont('Helvetica');\nconst pickFontFromFontStack = (codePoint, fontStack, lastFont) => {\n  const fontStackWithFallback = [...fontStack, lastFont, getFallbackFont()];\n  for (let i = 0; i < fontStackWithFallback.length; i += 1) {\n    const font = fontStackWithFallback[i];\n    if (!IGNORED_CODE_POINTS.includes(codePoint) && font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n      return font;\n    }\n  }\n  return getFallbackFont();\n};\nconst fontSubstitution = () => _ref => {\n  let {\n    string,\n    runs\n  } = _ref;\n  let lastFont = null;\n  let lastFontSize = null;\n  let lastIndex = 0;\n  let index = 0;\n  const res = [];\n  for (let i = 0; i < runs.length; i += 1) {\n    const run = runs[i];\n    const defaultFont = run.attributes.font.map(font => typeof font === 'string' ? getOrCreateFont(font) : font);\n    if (string.length === 0) {\n      res.push({\n        start: 0,\n        end: 0,\n        attributes: {\n          font: defaultFont\n        }\n      });\n      break;\n    }\n    const chars = string.slice(run.start, run.end);\n    for (let j = 0; j < chars.length; j += 1) {\n      const char = chars[j];\n      const codePoint = char.codePointAt();\n      // If the default font does not have a glyph and the fallback font does, we use it\n      const font = pickFontFromFontStack(codePoint, defaultFont, lastFont);\n      const fontSize = getFontSize(run);\n\n      // If anything that would impact res has changed, update it\n      if (font !== lastFont || fontSize !== lastFontSize || font.unitsPerEm !== lastFont.unitsPerEm) {\n        if (lastFont) {\n          res.push({\n            start: lastIndex,\n            end: index,\n            attributes: {\n              font: lastFont,\n              scale: lastFontSize / lastFont.unitsPerEm\n            }\n          });\n        }\n        lastFont = font;\n        lastFontSize = fontSize;\n        lastIndex = index;\n      }\n      index += char.length;\n    }\n  }\n  if (lastIndex < string.length) {\n    const fontSize = getFontSize(last(runs));\n    res.push({\n      start: lastIndex,\n      end: string.length,\n      attributes: {\n        font: lastFont,\n        scale: fontSize / lastFont.unitsPerEm\n      }\n    });\n  }\n  return {\n    string,\n    runs: res\n  };\n};\nconst isTextInstance$4 = node => node.type === P.TextInstance;\nconst engines$1 = {\n  bidi,\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution\n};\nconst engine$1 = layoutEngine(engines$1);\nconst getFragments$1 = (fontStore, instance) => {\n  if (!instance) return [{\n    string: ''\n  }];\n  const fragments = [];\n  const {\n    fill = 'black',\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    opacity\n  } = instance.props;\n  const _textDecoration = instance.props.textDecoration;\n  const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n  const font = fontFamilies.map(fontFamilyName => {\n    if (typeof fontFamilyName !== 'string') return fontFamilyName;\n    const opts = {\n      fontFamily: fontFamilyName,\n      fontWeight,\n      fontStyle\n    };\n    const obj = fontStore ? fontStore.getFont(opts) : null;\n    return obj ? obj.data : fontFamilyName;\n  });\n  const attributes = {\n    font,\n    opacity,\n    fontSize,\n    color: fill,\n    underlineStyle: textDecorationStyle,\n    underline: _textDecoration === 'underline' || _textDecoration === 'underline line-through' || _textDecoration === 'line-through underline',\n    underlineColor: textDecorationColor || fill,\n    strike: _textDecoration === 'line-through' || _textDecoration === 'underline line-through' || _textDecoration === 'line-through underline',\n    strikeStyle: textDecorationStyle,\n    strikeColor: textDecorationColor || fill\n  };\n  for (let i = 0; i < instance.children.length; i += 1) {\n    const child = instance.children[i];\n    if (isTextInstance$4(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes\n      });\n    } else if (child) {\n      fragments.push(...getFragments$1(child));\n    }\n  }\n  return fragments;\n};\nconst getAttributedString$1 = (fontStore, instance) => fromFragments(getFragments$1(fontStore, instance));\nconst AlmostInfinity = 999999999999;\nconst shrinkWhitespaceFactor = {\n  before: -0.5,\n  after: -0.5\n};\nconst layoutTspan = fontStore => node => {\n  var _node$props, _node$props2;\n  const attributedString = getAttributedString$1(fontStore, node);\n  const x = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.x) || 0;\n  const y = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.y) || 0;\n  const container = {\n    x,\n    y,\n    width: AlmostInfinity,\n    height: AlmostInfinity\n  };\n  const hyphenationCallback = node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null;\n  const layoutOptions = {\n    hyphenationCallback,\n    shrinkWhitespaceFactor\n  };\n  const lines = engine$1(attributedString, container, layoutOptions).flat();\n  return Object.assign({}, node, {\n    lines\n  });\n};\nconst layoutText$1 = (fontStore, node) => {\n  if (!node.children) return node;\n  const children = node.children.map(layoutTspan(fontStore));\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst isDefs = node => node.type === P.Defs;\nconst getDefs = node => {\n  const children = node.children || [];\n  const defs = children.find(isDefs) || {};\n  const values = defs.children || [];\n  return values.reduce((acc, value) => {\n    var _value$props;\n    const id = (_value$props = value.props) === null || _value$props === void 0 ? void 0 : _value$props.id;\n    if (id) acc[id] = value;\n    return acc;\n  }, {});\n};\nconst isNotDefs = node => node.type !== P.Defs;\nconst detachDefs = node => {\n  if (!node.children) return node;\n  const children = node.children.filter(isNotDefs);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst URL_REGEX = /url\\(['\"]?#([^'\"]+)['\"]?\\)/;\nconst replaceDef = (defs, value) => {\n  if (!value) return undefined;\n  if (!URL_REGEX.test(value)) return value;\n  const match = value.match(URL_REGEX);\n  return defs[match[1]];\n};\nconst parseNodeDefs = defs => node => {\n  var _node$props, _node$props2;\n  const fill = replaceDef(defs, (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.fill);\n  const clipPath = replaceDef(defs, (_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.clipPath);\n  const props = Object.assign({}, node.props, {\n    fill,\n    clipPath\n  });\n  const children = node.children ? node.children.map(parseNodeDefs(defs)) : undefined;\n  return Object.assign({}, node, {\n    props,\n    children\n  });\n};\nconst parseDefs = root => {\n  if (!root.children) return root;\n  const defs = getDefs(root);\n  const children = root.children.map(parseNodeDefs(defs));\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst replaceDefs = node => {\n  return detachDefs(parseDefs(node));\n};\nconst parseViewbox = value => {\n  if (!value) return null;\n  const values = value.split(/[,\\s]+/).map(parseFloat);\n  if (values.length !== 4) return null;\n  return {\n    minX: values[0],\n    minY: values[1],\n    maxX: values[2],\n    maxY: values[3]\n  };\n};\nconst getContainer$1 = node => {\n  const viewbox = parseViewbox(node.props.viewBox);\n  if (viewbox) {\n    return {\n      width: viewbox.maxX,\n      height: viewbox.maxY\n    };\n  }\n  if (node.props.width && node.props.height) {\n    return {\n      width: parseFloat(node.props.width),\n      height: parseFloat(node.props.height)\n    };\n  }\n  return {\n    width: 0,\n    height: 0\n  };\n};\nconst SVG_INHERITED_PROPS = ['x', 'y', 'clipPath', 'clipRule', 'opacity', 'fill', 'fillOpacity', 'fillRule', 'stroke', 'strokeLinecap', 'strokeLinejoin', 'strokeOpacity', 'strokeWidth', 'textAnchor', 'dominantBaseline', 'color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];\nconst getInheritProps = node => {\n  const props = node.props || {};\n  return pick(SVG_INHERITED_PROPS, props);\n};\nconst inheritProps = node => {\n  if (!node.children) return node;\n  const inheritedProps = getInheritProps(node);\n  const children = node.children.map(child => {\n    const props = Object.assign({}, inheritedProps, child.props || {});\n    const newChild = Object.assign({}, child, {\n      props\n    });\n    return inheritProps(newChild);\n  });\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst parseAspectRatio = value => {\n  const match = value.replace(/[\\s\\r\\t\\n]+/gm, ' ').replace(/^defer\\s/, '').split(' ');\n  const align = match[0] || 'xMidYMid';\n  const meetOrSlice = match[1] || 'meet';\n  return {\n    align,\n    meetOrSlice\n  };\n};\nconst STYLE_PROPS = ['width', 'height', 'color', 'stroke', 'strokeWidth', 'opacity', 'fillOpacity', 'strokeOpacity', 'fill', 'fillRule', 'clipPath', 'offset', 'transform', 'strokeLinejoin', 'strokeLinecap', 'strokeDasharray'];\nconst VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];\nconst HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];\nconst isType$3 = type => node => node.type === type;\nconst isSvg$3 = isType$3(P.Svg);\nconst isText$5 = isType$3(P.Text);\nconst isTextInstance$3 = isType$3(P.TextInstance);\nconst transformPercent = container => props => mapValues(props, (value, key) => {\n  const match = matchPercent(value);\n  if (match && VERTICAL_PROPS.includes(key)) {\n    return match.percent * container.height;\n  }\n  if (match && HORIZONTAL_PROPS.includes(key)) {\n    return match.percent * container.width;\n  }\n  return value;\n});\nconst parsePercent = value => {\n  const match = matchPercent(value);\n  return match ? match.percent : parseFloat(value);\n};\nconst parseProps = container => node => {\n  let props = transformPercent(container)(node.props);\n  props = evolve({\n    x: parseFloat,\n    x1: parseFloat,\n    x2: parseFloat,\n    y: parseFloat,\n    y1: parseFloat,\n    y2: parseFloat,\n    r: parseFloat,\n    rx: parseFloat,\n    ry: parseFloat,\n    cx: parseFloat,\n    cy: parseFloat,\n    width: parseFloat,\n    height: parseFloat,\n    offset: parsePercent,\n    fill: transformColor,\n    opacity: parsePercent,\n    stroke: transformColor,\n    stopOpacity: parsePercent,\n    stopColor: transformColor,\n    transform: processTransform\n  }, props);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst mergeStyles$1 = node => {\n  const style = node.style || {};\n  const props = Object.assign({}, style, node.props);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst removeNoneValues = node => {\n  const removeNone = value => value === 'none' ? null : value;\n  const props = mapValues(node.props, removeNone);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst pickStyleProps = node => {\n  const props = node.props || {};\n  const styleProps = pick(STYLE_PROPS, props);\n  const style = Object.assign({}, styleProps, node.style || {});\n  return Object.assign({}, node, {\n    style\n  });\n};\nconst parseSvgProps = node => {\n  const props = evolve({\n    width: parseFloat,\n    height: parseFloat,\n    viewBox: parseViewbox,\n    preserveAspectRatio: parseAspectRatio\n  }, node.props);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst wrapBetweenTspan = node => ({\n  type: P.Tspan,\n  props: {},\n  children: [node]\n});\nconst addMissingTspan = node => {\n  if (!isText$5(node)) return node;\n  if (!node.children) return node;\n  const resolveChild = child => isTextInstance$3(child) ? wrapBetweenTspan(child) : child;\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst parseText = fontStore => node => {\n  if (isText$5(node)) return layoutText$1(fontStore, node);\n  if (!node.children) return node;\n  const children = node.children.map(parseText(fontStore));\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst resolveSvgNode = container => compose(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles$1);\nconst resolveChildren = container => node => {\n  if (!node.children) return node;\n  const resolveChild = compose(resolveChildren(container), resolveSvgNode(container));\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst resolveSvgRoot = (node, fontStore) => {\n  const container = getContainer$1(node);\n  return compose(replaceDefs, parseText(fontStore), parseSvgProps, pickStyleProps, inheritProps, resolveChildren(container))(node);\n};\n\n/**\n * Pre-process SVG nodes so they can be rendered in the next steps\n *\n * @param {Object} node root node\n * @param {Object} fontStore font store\n * @returns {Object} root node\n */\nconst resolveSvg = (node, fontStore) => {\n  if (!node.children) return node;\n  const resolveChild = child => resolveSvg(child, fontStore);\n  const root = isSvg$3(node) ? resolveSvgRoot(node, fontStore) : node;\n  const children = root.children.map(resolveChild);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\n/* eslint-disable import/prefer-default-export */\n\nlet instancePromise;\nconst loadYoga = async () => {\n  var _instancePromise;\n  // Yoga WASM binaries must be asynchronously compiled and loaded\n  // to prevent Event emitter memory leak warnings, Yoga must be loaded only once\n  const instance = await ((_instancePromise = instancePromise) !== null && _instancePromise !== void 0 ? _instancePromise : instancePromise = loadYoga$1());\n  const config = instance.Config.create();\n  config.setPointScaleFactor(0);\n  const node = {\n    create: () => instance.Node.createWithConfig(config)\n  };\n  return {\n    node\n  };\n};\nconst resolveYoga = async root => {\n  const yoga = await loadYoga();\n  return Object.assign({}, root, {\n    yoga\n  });\n};\nconst getZIndex = node => node.style.zIndex;\nconst shouldSort = node => node.type !== P.Document && node.type !== P.Svg;\nconst sortZIndex = (a, b) => {\n  const za = getZIndex(a);\n  const zb = getZIndex(b);\n  if (!za && !zb) return 0;\n  if (!za) return 1;\n  if (!zb) return -1;\n  return zb - za;\n};\n\n/**\n * Sort children by zIndex value\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst resolveZIndex = node => {\n  if (!node.children) return node;\n  const sortedChildren = shouldSort(node) ? node.children.sort(sortZIndex) : node.children;\n  const children = sortedChildren.map(resolveZIndex);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\n/* eslint-disable no-cond-assign */\n\n// Caches emoji images data\nconst emojis = {};\nconst regex = emojiRegex();\nconst reflect = promise => function () {\n  return promise(...arguments).then(v => v, e => e);\n};\n\n// Returns a function to be able to mock resolveImage.\nconst makeFetchEmojiImage = () => reflect(resolveImage);\n\n/**\n * When an emoji as no variations, it might still have 2 parts,\n * the canonical emoji and an empty string.\n * ex.\n *   (no color) Array.from('❤️') => [\"❤\", \"️\"]\n *   (w/ color) Array.from('👍🏿') => [\"👍\", \"🏿\"]\n *\n * The empty string needs to be removed otherwise the generated\n * url will be incorect.\n */\nconst _removeVariationSelectors = x => x !== '️';\nconst getCodePoints = (string, withVariationSelectors) => Array.from(string).filter(withVariationSelectors ? () => true : _removeVariationSelectors).map(char => char.codePointAt(0).toString(16)).join('-');\nconst buildEmojiUrl = (emoji, source) => {\n  const {\n    url,\n    format,\n    builder,\n    withVariationSelectors\n  } = source;\n  if (typeof builder === 'function') {\n    return builder(getCodePoints(emoji, withVariationSelectors));\n  }\n  return \"\".concat(url).concat(getCodePoints(emoji, withVariationSelectors), \".\").concat(format);\n};\nconst fetchEmojis = (string, source) => {\n  if (!source || !source.url && !source.builder) return [];\n  const promises = [];\n  Array.from(string.matchAll(regex)).forEach(match => {\n    const emoji = match[0];\n    if (!emojis[emoji] || emojis[emoji].loading) {\n      const emojiUrl = buildEmojiUrl(emoji, source);\n      emojis[emoji] = {\n        loading: true\n      };\n      const fetchEmojiImage = makeFetchEmojiImage();\n      promises.push(fetchEmojiImage({\n        uri: emojiUrl\n      }).then(image => {\n        emojis[emoji].loading = false;\n        emojis[emoji].data = image.data;\n      }));\n    }\n  });\n  return promises;\n};\nconst embedEmojis = fragments => {\n  const result = [];\n  for (let i = 0; i < fragments.length; i += 1) {\n    const fragment = fragments[i];\n    let lastIndex = 0;\n    Array.from(fragment.string.matchAll(regex)).forEach(match => {\n      const {\n        index\n      } = match;\n      const emoji = match[0];\n      const emojiSize = fragment.attributes.fontSize;\n      const chunk = fragment.string.slice(lastIndex, index + match[0].length);\n\n      // If emoji image was found, we create a new fragment with the\n      // correct attachment and object substitution character;\n      if (emojis[emoji] && emojis[emoji].data) {\n        result.push({\n          string: chunk.replace(match, String.fromCharCode(0xfffc)),\n          attributes: _objectSpread(_objectSpread({}, fragment.attributes), {}, {\n            attachment: {\n              width: emojiSize,\n              height: emojiSize,\n              yOffset: Math.floor(emojiSize * 0.1),\n              image: emojis[emoji].data\n            }\n          })\n        });\n      } else {\n        // If no emoji data, we try to use emojis in the font\n        result.push({\n          string: chunk,\n          attributes: fragment.attributes\n        });\n      }\n      lastIndex = index + emoji.length;\n    });\n    if (lastIndex < fragment.string.length) {\n      result.push({\n        string: fragment.string.slice(lastIndex),\n        attributes: fragment.attributes\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Get image source\n *\n * @param {Object} node image node\n * @returns {string | Object} image src\n */\nconst getSource = node => {\n  var _node$props, _node$props2, _node$props3;\n  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.src) || ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.source) || ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.href);\n};\n\n/**\n * Resolves `src` to `@react-pdf/image` interface.\n *\n * Also it handles factories and async sources.\n *\n * @param {string | Object | Function} src\n * @returns {Promise<Object>} resolved src\n */\nconst resolveSource = async src => {\n  const source = typeof src === 'function' ? await src() : await src;\n  return typeof source === 'string' ? {\n    uri: source\n  } : source;\n};\n\n/* eslint-disable no-param-reassign */\n\n/**\n * Fetches image and append data to node\n * Ideally this fn should be immutable.\n *\n * @param {Object} node\n */\nconst fetchImage = async node => {\n  const src = getSource(node);\n  const {\n    cache\n  } = node.props;\n  if (!src) {\n    console.warn(false, 'Image should receive either a \"src\" or \"source\" prop');\n    return;\n  }\n  try {\n    const source = await resolveSource(src);\n    if (!source) {\n      throw new Error(\"Image's \\\"src\\\" or \\\"source\\\" prop returned \".concat(source));\n    }\n    node.image = await resolveImage(source, {\n      cache\n    });\n    node.image.key = source.data ? source.data.toString() : source.uri;\n  } catch (e) {\n    node.image = {\n      width: 0,\n      height: 0,\n      key: null\n    };\n    console.warn(e.message);\n  }\n};\nconst isImage$2 = node => node.type === P.Image;\n\n/**\n * Get all asset promises that need to be resolved\n *\n * @param {Object} fontStore font store\n * @param {Object} node root node\n * @returns {Promise<void>[]} asset promises\n */\nconst fetchAssets = (fontStore, node) => {\n  var _node$children;\n  const promises = [];\n  const listToExplore = ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.slice(0)) || [];\n  const emojiSource = fontStore ? fontStore.getEmojiSource() : null;\n  while (listToExplore.length > 0) {\n    var _n$style;\n    const n = listToExplore.shift();\n    if (isImage$2(n)) {\n      promises.push(fetchImage(n));\n    }\n    if (fontStore && (_n$style = n.style) !== null && _n$style !== void 0 && _n$style.fontFamily) {\n      promises.push(fontStore.load(n.style));\n    }\n    if (typeof n === 'string') {\n      promises.push(...fetchEmojis(n, emojiSource));\n    }\n    if (typeof n.value === 'string') {\n      promises.push(...fetchEmojis(n.value, emojiSource));\n    }\n    if (n.children) {\n      n.children.forEach(childNode => {\n        listToExplore.push(childNode);\n      });\n    }\n  }\n  return promises;\n};\n\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param {Object} node root node\n * @param {Object} fontStore font store\n * @returns {Promise<Object>} root node\n */\nconst resolveAssets = async (node, fontStore) => {\n  const promises = fetchAssets(fontStore, node);\n  await Promise.all(promises);\n  return node;\n};\nconst isLink$1 = node => node.type === P.Link;\nconst DEFAULT_LINK_STYLES = {\n  color: 'blue',\n  textDecoration: 'underline'\n};\n\n/**\n * Computes styles using stylesheet\n *\n * @param {Object} container\n * @param {Object} node document node\n * @returns {Object} computed styles\n */\nconst computeStyle = (container, node) => {\n  let baseStyle = node.style;\n  if (isLink$1(node)) {\n    baseStyle = Array.isArray(node.style) ? [DEFAULT_LINK_STYLES, ...node.style] : [DEFAULT_LINK_STYLES, node.style];\n  }\n  return stylesheet(container, baseStyle);\n};\n\n/**\n * @typedef {Function} ResolveNodeStyles\n * @param {Object} node document node\n * @returns {Object} node (and subnodes) with resolved styles\n */\n\n/**\n * Resolves node styles\n *\n * @param {Object} container\n * @returns {ResolveNodeStyles} resolve node styles\n */\nconst resolveNodeStyles = container => node => {\n  const style = computeStyle(container, node);\n  if (!node.children) return Object.assign({}, node, {\n    style\n  });\n  const children = node.children.map(resolveNodeStyles(container));\n  return Object.assign({}, node, {\n    style,\n    children\n  });\n};\n\n/**\n * Resolves page styles\n *\n * @param {Object} page document page\n * @returns {Object} document page with resolved styles\n */\nconst resolvePageStyles = page => {\n  var _page$box, _page$box2, _page$props, _page$style;\n  const dpi = 72; // Removed: page.props?.dpi || 72;\n  const width = ((_page$box = page.box) === null || _page$box === void 0 ? void 0 : _page$box.width) || page.style.width;\n  const height = ((_page$box2 = page.box) === null || _page$box2 === void 0 ? void 0 : _page$box2.height) || page.style.height;\n  const orientation = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.orientation) || 'portrait';\n  const remBase = ((_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.fontSize) || 18;\n  const container = {\n    width,\n    height,\n    orientation,\n    dpi,\n    remBase\n  };\n  return resolveNodeStyles(container)(page);\n};\n\n/**\n * Resolves document styles\n *\n * @param {Object} root document root\n * @returns {Object} document root with resolved styles\n */\nconst resolveStyles = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePageStyles);\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst getTransformStyle = s => node => {\n  var _node$style, _node$style2;\n  return isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style[s]) ? '50%' : (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2[s];\n};\n\n/**\n * Get node origin\n *\n * @param {Object} node\n * @returns {{ left?: number, top?: number }} node origin\n */\nconst getOrigin = node => {\n  if (!node.box) return {};\n  const {\n    left,\n    top,\n    width,\n    height\n  } = node.box;\n  const transformOriginX = getTransformStyle('transformOriginX')(node);\n  const transformOriginY = getTransformStyle('transformOriginY')(node);\n  const percentX = matchPercent(transformOriginX);\n  const percentY = matchPercent(transformOriginY);\n  const offsetX = percentX ? width * percentX.percent : transformOriginX;\n  const offsetY = percentY ? height * percentY.percent : transformOriginY;\n  return {\n    left: left + offsetX,\n    top: top + offsetY\n  };\n};\n\n/**\n * Resolve node origin\n *\n * @param {Object} node\n * @returns {Object} node with origin attribute\n */\nconst resolveNodeOrigin = node => {\n  const origin = getOrigin(node);\n  const newNode = Object.assign({}, node, {\n    origin\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(resolveNodeOrigin);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n\n/**\n * Resolve document origins\n *\n * @param {Object} root document root\n * @returns {Object} document root\n */\n\nconst resolveOrigin = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolveNodeOrigin);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\n/* eslint-disable no-plusplus */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n\nconst getBookmarkValue = title => {\n  return typeof title === 'string' ? {\n    title,\n    fit: false,\n    expanded: false\n  } : title;\n};\nconst resolveBookmarks = node => {\n  let refs = 0;\n  const children = (node.children || []).slice(0);\n  const listToExplore = children.map(value => ({\n    value,\n    parent: null\n  }));\n  while (listToExplore.length > 0) {\n    var _child$props;\n    const element = listToExplore.shift();\n    const child = element.value;\n    let parent = element.parent;\n    if ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.bookmark) {\n      var _parent;\n      const bookmark = getBookmarkValue(child.props.bookmark);\n      const ref = refs++;\n      const newHierarchy = _objectSpread({\n        ref,\n        parent: (_parent = parent) === null || _parent === void 0 ? void 0 : _parent.ref\n      }, bookmark);\n      child.props.bookmark = newHierarchy;\n      parent = newHierarchy;\n    }\n    if (child.children) {\n      child.children.forEach(childNode => {\n        listToExplore.push({\n          value: childNode,\n          parent\n        });\n      });\n    }\n  }\n  return node;\n};\nconst VALID_ORIENTATIONS = ['portrait', 'landscape'];\n\n/**\n * Get page orientation. Defaults to portrait\n *\n * @param {Object} page object\n * @returns {string} page orientation\n */\nconst getOrientation = page => {\n  var _page$props;\n  const value = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.orientation) || 'portrait';\n  return VALID_ORIENTATIONS.includes(value) ? value : 'portrait';\n};\n\n/**\n * Return true if page is landscape\n *\n * @param {Object} page instance\n * @returns {boolean} is page landscape\n */\nconst isLandscape = page => getOrientation(page) === 'landscape';\nconst PAGE_SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0],\n  ID1: [153, 243]\n};\n\n/**\n * Transforms array into size object\n *\n * @param {number[]} v array\n * @returns {{ width: number, height: number }} size object with width and height\n */\nconst toSizeObject = v => ({\n  width: v[0],\n  height: v[1]\n});\n\n/**\n * Flip size object\n *\n * @param {{ width: number, height: number }} v size object\n * @returns {{ width: number, height: number }} flipped size object\n */\nconst flipSizeObject = v => ({\n  width: v.height,\n  height: v.width\n});\n\n/**\n * Adjust page size to passed DPI\n *\n * @param {{ width: number, height: number }} v size object\n * @param {number} dpi DPI\n * @returns {{ width: number, height: number }} adjusted size object\n */\nconst adjustDpi = (v, dpi) => ({\n  width: v.width ? v.width * (72 / dpi) : v.width,\n  height: v.height ? v.height * (72 / dpi) : v.height\n});\n\n/**\n * Returns size object from a given string\n *\n * @param {string} v page size string\n * @returns {{ width: number, height: number }} size object with width and height\n */\nconst getStringSize = v => {\n  return toSizeObject(PAGE_SIZES[v.toUpperCase()]);\n};\n\n/**\n * Returns size object from a single number\n *\n * @param {number} n page size number\n * @returns {{ width: number, height: number }} size object with width and height\n */\nconst getNumberSize = n => toSizeObject([n]);\n\n/**\n * Return page size in an object { width, height }\n *\n * @param {Object} page instance\n * @returns {{ width: number, height: number }} size object with width and height\n */\nconst getSize = page => {\n  var _page$props, _page$props2;\n  const value = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.size) || 'A4';\n  const dpi = parseFloat(((_page$props2 = page.props) === null || _page$props2 === void 0 ? void 0 : _page$props2.dpi) || 72);\n  const type = typeof value;\n\n  /**\n   * @type {{ width: number, height: number }}\n   */\n  let size;\n  if (type === 'string') {\n    size = getStringSize(value);\n  } else if (Array.isArray(value)) {\n    size = toSizeObject(value);\n    size = adjustDpi(size, dpi);\n  } else if (type === 'number') {\n    size = getNumberSize(value);\n    size = adjustDpi(size, dpi);\n  } else {\n    size = value;\n    size = adjustDpi(size, dpi);\n  }\n  return isLandscape(page) ? flipSizeObject(size) : size;\n};\n\n/**\n * Resolves page size\n *\n * @param {Object} page\n * @returns {Object} page with resolved size in style attribute\n */\nconst resolvePageSize = page => {\n  const size = getSize(page);\n  const style = flatten(page.style || {});\n  return _objectSpread(_objectSpread({}, page), {}, {\n    style: _objectSpread(_objectSpread({}, style), size)\n  });\n};\n\n/**\n * Resolves page sizes\n *\n * @param {Object} root document root\n * @returns {Object} document root with resolved page sizes\n */\nconst resolvePageSizes = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePageSize);\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst isFixed = node => {\n  var _node$props;\n  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.fixed) === true;\n};\n\n/**\n * Get line index at given height\n *\n * @param {Object} node\n * @param {number} height\n */\nconst lineIndexAtHeight = (node, height) => {\n  let y = 0;\n  if (!node.lines) return 0;\n  for (let i = 0; i < node.lines.length; i += 1) {\n    const line = node.lines[i];\n    if (y + line.box.height > height) return i;\n    y += line.box.height;\n  }\n  return node.lines.length;\n};\n\n/**\n * Get height for given text line index\n *\n * @param {Object} node\n * @param {number} index\n */\nconst heightAtLineIndex = (node, index) => {\n  let counter = 0;\n  if (!node.lines) return counter;\n  for (let i = 0; i < index; i += 1) {\n    const line = node.lines[i];\n    if (!line) break;\n    counter += line.box.height;\n  }\n  return counter;\n};\nconst getLineBreak = (node, height) => {\n  const top = get(node, ['box', 'top'], 0);\n  const widows = get(node, ['props', 'widows'], 2);\n  const orphans = get(node, ['props', 'orphans'], 2);\n  const linesQuantity = node.lines.length;\n  const slicedLine = lineIndexAtHeight(node, height - top);\n  if (slicedLine === 0) {\n    return 0;\n  }\n  if (linesQuantity < orphans) {\n    return linesQuantity;\n  }\n  if (slicedLine < orphans || linesQuantity < orphans + widows) {\n    return 0;\n  }\n  if (linesQuantity === orphans + widows) {\n    return orphans;\n  }\n  if (linesQuantity - slicedLine < widows) {\n    return linesQuantity - widows;\n  }\n  return slicedLine;\n};\n\n// Also receives contentArea in case it's needed\nconst splitText = (node, height) => {\n  const slicedLineIndex = getLineBreak(node, height);\n  const currentHeight = heightAtLineIndex(node, slicedLineIndex);\n  const nextHeight = node.box.height - currentHeight;\n  const current = Object.assign({}, node, {\n    box: _objectSpread(_objectSpread({}, node.box), {}, {\n      height: currentHeight,\n      borderBottomWidth: 0\n    }),\n    style: _objectSpread(_objectSpread({}, node.style), {}, {\n      marginBottom: 0,\n      paddingBottom: 0,\n      borderBottomWidth: 0,\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    }),\n    lines: node.lines.slice(0, slicedLineIndex)\n  });\n  const next = Object.assign({}, node, {\n    box: _objectSpread(_objectSpread({}, node.box), {}, {\n      top: 0,\n      height: nextHeight,\n      borderTopWidth: 0\n    }),\n    style: _objectSpread(_objectSpread({}, node.style), {}, {\n      marginTop: 0,\n      paddingTop: 0,\n      borderTopWidth: 0,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    }),\n    lines: node.lines.slice(slicedLineIndex)\n  });\n  return [current, next];\n};\nconst getTop$1 = node => {\n  var _node$box;\n  return ((_node$box = node.box) === null || _node$box === void 0 ? void 0 : _node$box.top) || 0;\n};\nconst hasFixedHeight = node => {\n  var _node$style;\n  return !isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.height);\n};\nconst splitNode = (node, height) => {\n  if (!node) return [null, null];\n  const nodeTop = getTop$1(node);\n  const current = Object.assign({}, node, {\n    box: _objectSpread(_objectSpread({}, node.box), {}, {\n      borderBottomWidth: 0\n    }),\n    style: _objectSpread(_objectSpread({}, node.style), {}, {\n      marginBottom: 0,\n      paddingBottom: 0,\n      borderBottomWidth: 0,\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    })\n  });\n  current.style.height = height - nodeTop;\n  const nextHeight = hasFixedHeight(node) ? node.box.height - (height - nodeTop) : null;\n  const next = Object.assign({}, node, {\n    box: _objectSpread(_objectSpread({}, node.box), {}, {\n      top: 0,\n      borderTopWidth: 0\n    }),\n    style: _objectSpread(_objectSpread({}, node.style), {}, {\n      marginTop: 0,\n      paddingTop: 0,\n      borderTopWidth: 0,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    })\n  });\n  if (nextHeight) {\n    next.style.height = nextHeight;\n  }\n  return [current, next];\n};\nconst NON_WRAP_TYPES = [P.Svg, P.Note, P.Image, P.Canvas];\nconst getWrap = node => {\n  var _node$props;\n  if (NON_WRAP_TYPES.includes(node.type)) return false;\n  return isNil((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.wrap) ? true : node.props.wrap;\n};\nconst getComputedPadding = (node, edge) => {\n  const {\n    yogaNode\n  } = node;\n  return yogaNode ? yogaNode.getComputedPadding(edge) : null;\n};\n\n/**\n * Get Yoga computed paddings. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ paddingTop: number, paddingRight: number, paddingBottom: number, paddingLeft: number }} paddings\n */\nconst getPadding = node => {\n  const {\n    style,\n    box\n  } = node;\n  const paddingTop = getComputedPadding(node, Yoga.Edge.Top) || (box === null || box === void 0 ? void 0 : box.paddingTop) || (style === null || style === void 0 ? void 0 : style.paddingTop) || (style === null || style === void 0 ? void 0 : style.paddingVertical) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n  const paddingRight = getComputedPadding(node, Yoga.Edge.Right) || (box === null || box === void 0 ? void 0 : box.paddingRight) || (style === null || style === void 0 ? void 0 : style.paddingRight) || (style === null || style === void 0 ? void 0 : style.paddingHorizontal) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n  const paddingBottom = getComputedPadding(node, Yoga.Edge.Bottom) || (box === null || box === void 0 ? void 0 : box.paddingBottom) || (style === null || style === void 0 ? void 0 : style.paddingBottom) || (style === null || style === void 0 ? void 0 : style.paddingVertical) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n  const paddingLeft = getComputedPadding(node, Yoga.Edge.Left) || (box === null || box === void 0 ? void 0 : box.paddingLeft) || (style === null || style === void 0 ? void 0 : style.paddingLeft) || (style === null || style === void 0 ? void 0 : style.paddingHorizontal) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n  return {\n    paddingTop,\n    paddingRight,\n    paddingBottom,\n    paddingLeft\n  };\n};\nconst getWrapArea = page => {\n  var _page$style;\n  const {\n    paddingBottom\n  } = getPadding(page);\n  const height = (_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.height;\n  return height - paddingBottom;\n};\nconst getContentArea = page => {\n  var _page$style;\n  const height = (_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.height;\n  const {\n    paddingTop,\n    paddingBottom\n  } = getPadding(page);\n  return height - paddingBottom - paddingTop;\n};\nconst isString = value => typeof value === 'string';\nconst isNumber = value => typeof value === 'number';\nconst isFragment = value => value && value.type === Symbol.for('react.fragment');\n\n/**\n * Transforms a react element instance to internal element format.\n *\n * Can return multiple instances in the case of arrays or fragments.\n *\n * @param {Object} element React element\n * @returns {Object[]} parsed React elements\n */\nconst createInstances = element => {\n  if (!element) return [];\n  if (isString(element) || isNumber(element)) {\n    return [{\n      type: TextInstance,\n      value: \"\".concat(element)\n    }];\n  }\n  if (isFragment(element)) {\n    return createInstances(element.props.children);\n  }\n  if (Array.isArray(element)) {\n    return element.reduce((acc, el) => acc.concat(createInstances(el)), []);\n  }\n  if (!isString(element.type)) {\n    return createInstances(element.type(element.props));\n  }\n  const {\n      type,\n      props: {\n        style = {},\n        children = []\n      }\n    } = element,\n    props = _objectWithoutProperties(element.props, _excluded);\n  const nextChildren = castArray(children).reduce((acc, child) => acc.concat(createInstances(child)), []);\n  return [{\n    type,\n    style,\n    props,\n    box: {},\n    children: nextChildren\n  }];\n};\n\n/* eslint-disable no-continue */\n\nconst getBreak = node => {\n  var _node$props;\n  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.break) || false;\n};\nconst getMinPresenceAhead = node => {\n  var _node$props2;\n  return ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.minPresenceAhead) || 0;\n};\nconst getFurthestEnd = elements => Math.max(...elements.map(node => node.box.top + node.box.height));\nconst getEndOfMinPresenceAhead = child => {\n  return child.box.top + child.box.height + child.box.marginBottom + getMinPresenceAhead(child);\n};\nconst getEndOfPresence = (child, futureElements) => {\n  const afterMinPresenceAhead = getEndOfMinPresenceAhead(child);\n  const endOfFurthestFutureElement = getFurthestEnd(futureElements.filter(node => {\n    var _node$props3;\n    return !((_node$props3 = node.props) !== null && _node$props3 !== void 0 && _node$props3.fixed);\n  }));\n  return Math.min(afterMinPresenceAhead, endOfFurthestFutureElement);\n};\nconst shouldBreak = (child, futureElements, height) => {\n  var _child$props;\n  if ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.fixed) return false;\n  const shouldSplit = height < child.box.top + child.box.height;\n  const canWrap = getWrap(child);\n\n  // Calculate the y coordinate where the desired presence of the child ends\n  const endOfPresence = getEndOfPresence(child, futureElements);\n  // If the child is already at the top of the page, breaking won't improve its presence\n  // (as long as react-pdf does not support breaking into differently sized containers)\n  const breakingImprovesPresence = child.box.top > child.box.marginTop;\n  return getBreak(child) || shouldSplit && !canWrap || !shouldSplit && endOfPresence > height && breakingImprovesPresence;\n};\nconst IGNORABLE_CODEPOINTS = [8232,\n// LINE_SEPARATOR\n8233 // PARAGRAPH_SEPARATOR\n];\nconst buildSubsetForFont = font => IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n  if (font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n    return acc;\n  }\n  return [...acc, String.fromCharCode(codePoint)];\n}, []);\nconst ignoreChars = fragments => fragments.map(fragment => {\n  const charSubset = buildSubsetForFont(fragment.attributes.font);\n  const subsetRegex = new RegExp(charSubset.join('|'));\n  return {\n    string: fragment.string.replace(subsetRegex, ''),\n    attributes: fragment.attributes\n  };\n});\nconst PREPROCESSORS = [ignoreChars, embedEmojis];\nconst isImage$1 = node => node.type === P.Image;\nconst isTextInstance$2 = node => node.type === P.TextInstance;\n\n/**\n * Get textkit fragments of given node object\n *\n * @param {Object} fontStore font store\n * @param {Object} instance node\n * @param {string} [parentLink] parent link\n * @param {number} [level] fragment level\n * @returns {Object[]} text fragments\n */\nconst getFragments = function (fontStore, instance, parentLink, level) {\n  var _instance$props, _instance$props2;\n  if (level === void 0) {\n    level = 0;\n  }\n  if (!instance) return [{\n    string: ''\n  }];\n  let fragments = [];\n  const {\n    color = 'black',\n    direction = 'ltr',\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textAlign,\n    lineHeight,\n    textDecoration,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    letterSpacing,\n    textIndent,\n    opacity,\n    verticalAlign\n  } = instance.style;\n  const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n  const font = fontFamilies.map(fontFamilyName => {\n    if (typeof fontFamilyName !== 'string') return fontFamilyName;\n    const opts = {\n      fontFamily: fontFamilyName,\n      fontWeight,\n      fontStyle\n    };\n    const obj = fontStore ? fontStore.getFont(opts) : null;\n    return obj ? obj.data : fontFamilyName;\n  });\n\n  // Don't pass main background color to textkit. Will be rendered by the render package instead\n  const backgroundColor = level === 0 ? null : instance.style.backgroundColor;\n  const attributes = {\n    font,\n    color,\n    opacity,\n    fontSize,\n    lineHeight,\n    direction,\n    verticalAlign,\n    backgroundColor,\n    indent: textIndent,\n    characterSpacing: letterSpacing,\n    strikeStyle: textDecorationStyle,\n    underlineStyle: textDecorationStyle,\n    underline: textDecoration === 'underline' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',\n    strike: textDecoration === 'line-through' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',\n    strikeColor: textDecorationColor || color,\n    underlineColor: textDecorationColor || color,\n    link: parentLink || ((_instance$props = instance.props) === null || _instance$props === void 0 ? void 0 : _instance$props.src) || ((_instance$props2 = instance.props) === null || _instance$props2 === void 0 ? void 0 : _instance$props2.href),\n    align: textAlign || (direction === 'rtl' ? 'right' : 'left')\n  };\n  for (let i = 0; i < instance.children.length; i += 1) {\n    const child = instance.children[i];\n    if (isImage$1(child)) {\n      fragments.push({\n        string: String.fromCharCode(0xfffc),\n        attributes: _objectSpread(_objectSpread({}, attributes), {}, {\n          attachment: {\n            width: child.style.width || fontSize,\n            height: child.style.height || fontSize,\n            image: child.image.data\n          }\n        })\n      });\n    } else if (isTextInstance$2(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes\n      });\n    } else if (child) {\n      fragments.push(...getFragments(fontStore, child, attributes.link, level + 1));\n    }\n  }\n  for (let i = 0; i < PREPROCESSORS.length; i += 1) {\n    const preprocessor = PREPROCESSORS[i];\n    fragments = preprocessor(fragments);\n  }\n  return fragments;\n};\n\n/**\n * Get textkit attributed string from text node\n *\n * @param {Object} fontStore font store\n * @param {Object} instance node\n * @returns {Object} attributed string\n */\nconst getAttributedString = (fontStore, instance) => {\n  const fragments = getFragments(fontStore, instance);\n  return fromFragments(fragments);\n};\nconst engines = {\n  bidi,\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution\n};\nconst engine = layoutEngine(engines);\nconst getMaxLines = node => {\n  var _node$style;\n  return (_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.maxLines;\n};\nconst getTextOverflow = node => {\n  var _node$style2;\n  return (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.textOverflow;\n};\n\n/**\n * Get layout container for specific text node\n *\n * @param {number} width\n * @param {number} height\n * @param {Object} node\n * @returns {Object} layout container\n */\nconst getContainer = (width, height, node) => {\n  const maxLines = getMaxLines(node);\n  const textOverflow = getTextOverflow(node);\n  return {\n    x: 0,\n    y: 0,\n    width,\n    maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow\n  };\n};\n\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\nconst getLayoutOptions = (fontStore, node) => ({\n  hyphenationPenalty: node.props.hyphenationPenalty,\n  shrinkWhitespaceFactor: {\n    before: -0.5,\n    after: -0.5\n  },\n  hyphenationCallback: node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null\n});\n\n/**\n * Get text lines for given node\n *\n * @param {Object} node node\n * @param {number} width container width\n * @param {number} height container height\n * @param {number} fontStore font store\n * @returns {Object[]} layout lines\n */\nconst layoutText = (node, width, height, fontStore) => {\n  const attributedString = getAttributedString(fontStore, node);\n  const container = getContainer(width, height, node);\n  const options = getLayoutOptions(fontStore, node);\n  const lines = engine(attributedString, container, options);\n  return lines.reduce((acc, line) => [...acc, ...line], []);\n};\nconst isType$2 = type => node => node.type === type;\nconst isSvg$2 = isType$2(P.Svg);\nconst isText$4 = isType$2(P.Text);\nconst shouldIterate = node => !isSvg$2(node) && !isText$4(node);\nconst shouldLayoutText = node => isText$4(node) && !node.lines;\n\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\nconst resolveTextLayout = (node, fontStore) => {\n  if (shouldLayoutText(node)) {\n    const width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n    const height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n\n    // eslint-disable-next-line no-param-reassign\n    node.lines = layoutText(node, width, height, fontStore);\n  }\n  if (shouldIterate(node)) {\n    if (!node.children) return node;\n    const mapChild = child => resolveTextLayout(child, fontStore);\n    const children = node.children.map(mapChild);\n    return Object.assign({}, node, {\n      children\n    });\n  }\n  return node;\n};\nconst BASE_INHERITABLE_PROPERTIES = ['color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'textTransform', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];\nconst TEXT_INHERITABLE_PROPERTIES = [...BASE_INHERITABLE_PROPERTIES, 'backgroundColor'];\nconst isSvg$1 = node => node.type === P.Svg;\nconst isText$3 = node => node.type === P.Text;\n\n// Merge style values\nconst mergeValues = (styleName, value, inheritedValue) => {\n  switch (styleName) {\n    case 'textDecoration':\n      {\n        // merge not none and not false textDecoration values to one rule\n        return [inheritedValue, value].filter(v => v && v !== 'none').join(' ');\n      }\n    default:\n      return value;\n  }\n};\n\n// Merge inherited and node styles\nconst merge = (inheritedStyles, style) => {\n  const mergedStyles = _objectSpread({}, inheritedStyles);\n  Object.entries(style).forEach(_ref => {\n    let [styleName, value] = _ref;\n    mergedStyles[styleName] = mergeValues(styleName, value, inheritedStyles[styleName]);\n  });\n  return mergedStyles;\n};\n\n/**\n * @typedef {Function} MergeStyles\n * @param {Object} node\n * @returns {Object} node with styles merged\n */\n\n/**\n * Merges styles with node\n *\n * @param {Object} inheritedStyles style object\n * @returns {MergeStyles} merge styles function\n */\nconst mergeStyles = inheritedStyles => node => {\n  const style = merge(inheritedStyles, node.style || {});\n  return Object.assign({}, node, {\n    style\n  });\n};\n\n/**\n * Inherit style values from the root to the leafs\n *\n * @param {Object} node document root\n * @returns {Object} document root with inheritance\n *\n */\nconst resolveInheritance = node => {\n  if (isSvg$1(node)) return node;\n  if (!node.children) return node;\n  const inheritableProperties = isText$3(node) ? TEXT_INHERITABLE_PROPERTIES : BASE_INHERITABLE_PROPERTIES;\n  const inheritStyles = pick(inheritableProperties, node.style || {});\n  const resolveChild = compose(resolveInheritance, mergeStyles(inheritStyles));\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst getComputedMargin = (node, edge) => {\n  const {\n    yogaNode\n  } = node;\n  return yogaNode ? yogaNode.getComputedMargin(edge) : null;\n};\n\n/**\n * Get Yoga computed magins. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ marginTop: number, marginRight: number, marginBottom: number, marginLeft: number }} margins\n */\nconst getMargin = node => {\n  const {\n    style,\n    box\n  } = node;\n  const marginTop = getComputedMargin(node, Yoga.Edge.Top) || (box === null || box === void 0 ? void 0 : box.marginTop) || (style === null || style === void 0 ? void 0 : style.marginTop) || (style === null || style === void 0 ? void 0 : style.marginVertical) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n  const marginRight = getComputedMargin(node, Yoga.Edge.Right) || (box === null || box === void 0 ? void 0 : box.marginRight) || (style === null || style === void 0 ? void 0 : style.marginRight) || (style === null || style === void 0 ? void 0 : style.marginHorizontal) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n  const marginBottom = getComputedMargin(node, Yoga.Edge.Bottom) || (box === null || box === void 0 ? void 0 : box.marginBottom) || (style === null || style === void 0 ? void 0 : style.marginBottom) || (style === null || style === void 0 ? void 0 : style.marginVertical) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n  const marginLeft = getComputedMargin(node, Yoga.Edge.Left) || (box === null || box === void 0 ? void 0 : box.marginLeft) || (style === null || style === void 0 ? void 0 : style.marginLeft) || (style === null || style === void 0 ? void 0 : style.marginHorizontal) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n  return {\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft\n  };\n};\n\n/**\n * Get Yoga computed position. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ top: number, right: number, bottom: number, left: number }} position\n */\nconst getPosition = node => {\n  const {\n    yogaNode\n  } = node;\n  return {\n    top: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedTop()) || 0,\n    right: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedRight()) || 0,\n    bottom: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedBottom()) || 0,\n    left: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedLeft()) || 0\n  };\n};\nconst DEFAULT_DIMENSION = {\n  width: 0,\n  height: 0\n};\n\n/**\n * Get Yoga computed dimensions. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ width: number, height: number }} dimensions\n */\nconst getDimension = node => {\n  const {\n    yogaNode\n  } = node;\n  if (!yogaNode) return DEFAULT_DIMENSION;\n  return {\n    width: yogaNode.getComputedWidth(),\n    height: yogaNode.getComputedHeight()\n  };\n};\nconst getComputedBorder = (yogaNode, edge) => yogaNode ? yogaNode.getComputedBorder(edge) : 0;\n\n/**\n * Get Yoga computed border width. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ borderTopWidth: number, borderRightWidth: number, borderBottomWidth: number, borderLeftWidth: number }} border widths\n */\nconst getBorderWidth = node => {\n  const {\n    yogaNode\n  } = node;\n  return {\n    borderTopWidth: getComputedBorder(yogaNode, Yoga.Edge.Top),\n    borderRightWidth: getComputedBorder(yogaNode, Yoga.Edge.Right),\n    borderBottomWidth: getComputedBorder(yogaNode, Yoga.Edge.Bottom),\n    borderLeftWidth: getComputedBorder(yogaNode, Yoga.Edge.Left)\n  };\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set display attribute to node's Yoga instance\n *\n * @param {string} value display\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setDisplay = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (yogaNode) {\n    yogaNode.setDisplay(value === 'none' ? Yoga.Display.None : Yoga.Display.Flex);\n  }\n  return node;\n};\nconst OVERFLOW = {\n  hidden: Yoga.Overflow.Hidden,\n  scroll: Yoga.Overflow.Scroll\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set overflow attribute to node's Yoga instance\n *\n * @param {string} value overflow value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setOverflow = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    const overflow = OVERFLOW[value] || Yoga.Overflow.Visible;\n    yogaNode.setOverflow(overflow);\n  }\n  return node;\n};\nconst FLEX_WRAP = {\n  wrap: Yoga.Wrap.Wrap,\n  'wrap-reverse': Yoga.Wrap.WrapReverse\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set flex wrap attribute to node's Yoga instance\n *\n * @param {string} value flex wrap value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setFlexWrap = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (yogaNode) {\n    const flexWrap = FLEX_WRAP[value] || Yoga.Wrap.NoWrap;\n    yogaNode.setFlexWrap(flexWrap);\n  }\n  return node;\n};\n\n/* eslint-disable no-unused-expressions */\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * @typedef {Function} YogaValueSetter\n * @param {any} value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\n\n/**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param {string} attr property\n * @param {number} [edge] edge\n * @returns {YogaValueSetter} node instance wrapper\n */\nconst setYogaValue = (attr, edge) => value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    const hasEdge = !isNil(edge);\n    const fixedMethod = \"set\".concat(upperFirst(attr));\n    const autoMethod = \"\".concat(fixedMethod, \"Auto\");\n    const percentMethod = \"\".concat(fixedMethod, \"Percent\");\n    const percent = matchPercent(value);\n    if (percent && !yogaNode[percentMethod]) {\n      throw new Error(\"You can't pass percentage values to \".concat(attr, \" property\"));\n    }\n    if (percent) {\n      if (hasEdge) {\n        var _yogaNode$percentMeth;\n        (_yogaNode$percentMeth = yogaNode[percentMethod]) === null || _yogaNode$percentMeth === void 0 ? void 0 : _yogaNode$percentMeth.call(yogaNode, edge, percent.value);\n      } else {\n        var _yogaNode$percentMeth2;\n        (_yogaNode$percentMeth2 = yogaNode[percentMethod]) === null || _yogaNode$percentMeth2 === void 0 ? void 0 : _yogaNode$percentMeth2.call(yogaNode, percent.value);\n      }\n    } else if (value === 'auto') {\n      if (hasEdge) {\n        var _yogaNode$autoMethod;\n        (_yogaNode$autoMethod = yogaNode[autoMethod]) === null || _yogaNode$autoMethod === void 0 ? void 0 : _yogaNode$autoMethod.call(yogaNode, edge);\n      } else {\n        var _yogaNode$autoMethod2;\n        (_yogaNode$autoMethod2 = yogaNode[autoMethod]) === null || _yogaNode$autoMethod2 === void 0 ? void 0 : _yogaNode$autoMethod2.call(yogaNode);\n      }\n    } else if (hasEdge) {\n      var _yogaNode$fixedMethod;\n      (_yogaNode$fixedMethod = yogaNode[fixedMethod]) === null || _yogaNode$fixedMethod === void 0 ? void 0 : _yogaNode$fixedMethod.call(yogaNode, edge, value);\n    } else {\n      var _yogaNode$fixedMethod2;\n      (_yogaNode$fixedMethod2 = yogaNode[fixedMethod]) === null || _yogaNode$fixedMethod2 === void 0 ? void 0 : _yogaNode$fixedMethod2.call(yogaNode, value);\n    }\n  }\n  return node;\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set flex grow attribute to node's Yoga instance\n *\n * @param {number} value flex grow value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setFlexGrow = value => node => {\n  return setYogaValue('flexGrow')(value || 0)(node);\n};\n\n/**\n * Set flex basis attribute to node's Yoga instance\n *\n * @param {number} flex basis value\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setFlexBasis = setYogaValue('flexBasis');\nconst ALIGN = {\n  'flex-start': Yoga.Align.FlexStart,\n  center: Yoga.Align.Center,\n  'flex-end': Yoga.Align.FlexEnd,\n  stretch: Yoga.Align.Stretch,\n  baseline: Yoga.Align.Baseline,\n  'space-between': Yoga.Align.SpaceBetween,\n  'space-around': Yoga.Align.SpaceAround,\n  'space-evenly': Yoga.Align.SpaceEvenly\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * @typedef {Function} AlignSetter\n * @param {string} value align value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\n\n/**\n * Set generic align attribute to node's Yoga instance\n *\n * @param {string} attr specific align property\n * @returns {AlignSetter} align setter\n */\nconst setAlign = attr => value => node => {\n  const {\n    yogaNode\n  } = node;\n  const defaultValue = attr === 'items' ? Yoga.Align.Stretch : Yoga.Align.Auto;\n  if (yogaNode) {\n    const align = ALIGN[value] || defaultValue;\n    yogaNode[\"setAlign\".concat(upperFirst(attr))](align);\n  }\n  return node;\n};\n\n/**\n * Set align self attribute to node's Yoga instance\n *\n * @param {string} align value\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setAlignSelf = setAlign('self');\n\n/**\n * Set align items attribute to node's Yoga instance\n *\n * @param {string} align value\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setAlignItems = setAlign('items');\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set flex shrink attribute to node's Yoga instance\n *\n * @param {number} value flex shrink value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setFlexShrink = value => node => {\n  return setYogaValue('flexShrink')(value || 1)(node);\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set aspect ratio attribute to node's Yoga instance\n *\n * @param {number} value ratio\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setAspectRatio = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setAspectRatio(value);\n  }\n  return node;\n};\n\n/**\n * Set align content attribute to node's Yoga instance\n *\n * @param {string} align value\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setAlignContent = setAlign('content');\nconst POSITION = {\n  absolute: Yoga.PositionType.Absolute,\n  relative: Yoga.PositionType.Relative,\n  static: Yoga.PositionType.Static\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set position type attribute to node's Yoga instance\n *\n * @param {string} value position position type\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setPositionType = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setPositionType(POSITION[value]);\n  }\n  return node;\n};\nconst FLEX_DIRECTIONS = {\n  row: Yoga.FlexDirection.Row,\n  'row-reverse': Yoga.FlexDirection.RowReverse,\n  'column-reverse': Yoga.FlexDirection.ColumnReverse\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param {string} value flex direction value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setFlexDirection = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (yogaNode) {\n    const flexDirection = FLEX_DIRECTIONS[value] || Yoga.FlexDirection.Column;\n    yogaNode.setFlexDirection(flexDirection);\n  }\n  return node;\n};\nconst JUSTIFY_CONTENT = {\n  center: Yoga.Justify.Center,\n  'flex-end': Yoga.Justify.FlexEnd,\n  'space-between': Yoga.Justify.SpaceBetween,\n  'space-around': Yoga.Justify.SpaceAround,\n  'space-evenly': Yoga.Justify.SpaceEvenly\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set justify content attribute to node's Yoga instance\n *\n * @param {string} value justify content value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setJustifyContent = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    const justifyContent = JUSTIFY_CONTENT[value] || Yoga.Justify.FlexStart;\n    yogaNode.setJustifyContent(justifyContent);\n  }\n  return node;\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set margin top attribute to node's Yoga instance\n *\n * @param {number} margin margin top\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setMarginTop = setYogaValue('margin', Yoga.Edge.Top);\n\n/**\n * Set margin right attribute to node's Yoga instance\n *\n * @param {number} margin margin right\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setMarginRight = setYogaValue('margin', Yoga.Edge.Right);\n\n/**\n * Set margin bottom attribute to node's Yoga instance\n *\n * @param {number} margin margin bottom\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setMarginBottom = setYogaValue('margin', Yoga.Edge.Bottom);\n\n/**\n * Set margin left attribute to node's Yoga instance\n *\n * @param {number} margin margin left\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setMarginLeft = setYogaValue('margin', Yoga.Edge.Left);\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set padding top attribute to node's Yoga instance\n *\n * @param {number} padding padding top\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPaddingTop = setYogaValue('padding', Yoga.Edge.Top);\n\n/**\n * Set padding right attribute to node's Yoga instance\n *\n * @param {number} padding padding right\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPaddingRight = setYogaValue('padding', Yoga.Edge.Right);\n\n/**\n * Set padding bottom attribute to node's Yoga instance\n *\n * @param {number} padding padding bottom\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPaddingBottom = setYogaValue('padding', Yoga.Edge.Bottom);\n\n/**\n * Set padding left attribute to node's Yoga instance\n *\n * @param {number} padding padding left\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPaddingLeft = setYogaValue('padding', Yoga.Edge.Left);\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set border top attribute to node's Yoga instance\n *\n * @param {number} border border top width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setBorderTop = setYogaValue('border', Yoga.Edge.Top);\n\n/**\n * Set border right attribute to node's Yoga instance\n *\n * @param {number} border border right width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setBorderRight = setYogaValue('border', Yoga.Edge.Right);\n\n/**\n * Set border bottom attribute to node's Yoga instance\n *\n * @param {number} border border bottom width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setBorderBottom = setYogaValue('border', Yoga.Edge.Bottom);\n\n/**\n * Set border left attribute to node's Yoga instance\n *\n * @param {number} border border left width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setBorderLeft = setYogaValue('border', Yoga.Edge.Left);\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set position top attribute to node's Yoga instance\n *\n * @param {number} position position top\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPositionTop = setYogaValue('position', Yoga.Edge.Top);\n\n/**\n * Set position right attribute to node's Yoga instance\n *\n * @param {number} position position right\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPositionRight = setYogaValue('position', Yoga.Edge.Right);\n\n/**\n * Set position bottom attribute to node's Yoga instance\n *\n * @param {number} position position bottom\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPositionBottom = setYogaValue('position', Yoga.Edge.Bottom);\n\n/**\n * Set position left attribute to node's Yoga instance\n *\n * @param {number} position position left\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPositionLeft = setYogaValue('position', Yoga.Edge.Left);\n\n/**\n * Set width to node's Yoga instance\n *\n * @param {number} width\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setWidth = setYogaValue('width');\n\n/**\n * Set min width to node's Yoga instance\n *\n * @param {number} min width\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setMinWidth = setYogaValue('minWidth');\n\n/**\n * Set max width to node's Yoga instance\n *\n * @param {number} max width\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setMaxWidth = setYogaValue('maxWidth');\n\n/**\n * Set height to node's Yoga instance\n *\n * @param {number} height\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setHeight = setYogaValue('height');\n\n/**\n * Set min height to node's Yoga instance\n *\n * @param {number} min height\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setMinHeight = setYogaValue('minHeight');\n\n/**\n * Set max height to node's Yoga instance\n *\n * @param {number} max height\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setMaxHeight = setYogaValue('maxHeight');\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set rowGap value to node's Yoga instance\n *\n * @param {number} value gap value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setRowGap = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setGap(Yoga.Gutter.Row, value);\n  }\n  return node;\n};\n\n/**\n * Set columnGap value to node's Yoga instance\n *\n * @param {number} value gap value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setColumnGap = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setGap(Yoga.Gutter.Column, value);\n  }\n  return node;\n};\nconst getAspectRatio = viewbox => {\n  if (!viewbox) return null;\n  return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);\n};\n\n/**\n * @typedef {Function} MeasureSvg\n * @param {number} width\n * @param {number} widthMode\n * @param {number} height\n * @param {number} heightMode\n * @returns {{ width: number, height: number }} svg width and height\n */\n\n/**\n * Yoga svg measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {MeasureSvg} measure svg\n */\nconst measureCanvas$1 = (page, node) => (width, widthMode, height, heightMode) => {\n  const aspectRatio = getAspectRatio(node.props.viewBox) || 1;\n  if (widthMode === Yoga.MeasureMode.Exactly || widthMode === Yoga.MeasureMode.AtMost) {\n    return {\n      width,\n      height: width / aspectRatio\n    };\n  }\n  if (heightMode === Yoga.MeasureMode.Exactly) {\n    return {\n      width: height * aspectRatio\n    };\n  }\n  return {};\n};\n\n/**\n * Get lines width (if any)\n *\n * @param {Object} node\n * @returns {number} lines width\n */\nconst linesWidth = node => {\n  if (!node.lines) return 0;\n  return Math.max(0, ...node.lines.map(line => line.xAdvance));\n};\n\n/**\n * Get lines height (if any)\n *\n * @param {Object} node\n * @returns {number} lines height\n */\nconst linesHeight = node => {\n  if (!node.lines) return -1;\n  return node.lines.reduce((acc, line) => acc + line.box.height, 0);\n};\n\n/* eslint-disable no-param-reassign */\n\nconst ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n\n/**\n * @typedef {Function} MeasureText\n * @param {number} width\n * @param {number} widthMode\n * @param {number} height\n * @returns {{ width: number, height: number }} text width and height\n */\n\n/**\n * Yoga text measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Object} fontStore\n * @returns {MeasureText} measure text function\n */\nconst measureText = (page, node, fontStore) => (width, widthMode, height) => {\n  if (widthMode === Yoga.MeasureMode.Exactly) {\n    if (!node.lines) node.lines = layoutText(node, width, height, fontStore);\n    return {\n      height: linesHeight(node)\n    };\n  }\n  if (widthMode === Yoga.MeasureMode.AtMost) {\n    var _node$style;\n    const alignFactor = ALIGNMENT_FACTORS[(_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.textAlign] || 0;\n    if (!node.lines) {\n      node.lines = layoutText(node, width, height, fontStore);\n      node.alignOffset = (width - linesWidth(node)) * alignFactor; // Compensate align in variable width containers\n    }\n    return {\n      height: linesHeight(node),\n      width: Math.min(width, linesWidth(node))\n    };\n  }\n  return {};\n};\n\n/**\n * Get image ratio\n *\n * @param {Object} node image node\n * @returns {number} image ratio\n */\nconst getRatio = node => {\n  var _node$image;\n  return (_node$image = node.image) !== null && _node$image !== void 0 && _node$image.data ? node.image.width / node.image.height : 1;\n};\n\n/**\n * Checks if page has auto height\n *\n * @param {Object} page\n * @returns {boolean} is page height auto\n */\nconst isHeightAuto = page => {\n  var _page$box;\n  return isNil((_page$box = page.box) === null || _page$box === void 0 ? void 0 : _page$box.height);\n};\nconst SAFETY_HEIGHT$1 = 10;\n\n/**\n * @typedef {Function} MeasureImage\n * @param {number} width\n * @param {number} widthMode\n * @param {number} height\n * @param {number} heightMode\n * @returns {{ width: number, height: number }} image width and height\n */\n\n/**\n * Yoga image measure function\n *\n * @param {Object} page page\n * @param {Object} node node\n * @returns {MeasureImage} measure image\n */\nconst measureImage = (page, node) => (width, widthMode, height, heightMode) => {\n  const imageRatio = getRatio(node);\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page);\n  const pageArea = isHeightAuto(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT$1;\n\n  // Skip measure if image data not present yet\n  if (!node.image) return {\n    width: 0,\n    height: 0\n  };\n  if (widthMode === Yoga.MeasureMode.Exactly && heightMode === Yoga.MeasureMode.Undefined) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(pageArea, scaledHeight)\n    };\n  }\n  if (heightMode === Yoga.MeasureMode.Exactly && (widthMode === Yoga.MeasureMode.AtMost || widthMode === Yoga.MeasureMode.Undefined)) {\n    return {\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n  if (widthMode === Yoga.MeasureMode.Exactly && heightMode === Yoga.MeasureMode.AtMost) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(height, pageArea, scaledHeight)\n    };\n  }\n  if (widthMode === Yoga.MeasureMode.AtMost && heightMode === Yoga.MeasureMode.AtMost) {\n    if (imageRatio > 1) {\n      return {\n        width,\n        height: Math.min(width / imageRatio, height)\n      };\n    }\n    return {\n      height,\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n  return {\n    height,\n    width\n  };\n};\n\n/* eslint-disable no-param-reassign */\n\nconst SAFETY_HEIGHT = 10;\nconst getMax = values => Math.max(-Infinity, ...values);\n\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */\nconst measureCtx = () => {\n  const ctx = {};\n  const points = [];\n  const nil = () => ctx;\n  const addPoint = (x, y) => points.push([x, y]);\n  const moveTo = function () {\n    addPoint(...arguments);\n    return ctx;\n  };\n  const rect = (x, y, w, h) => {\n    addPoint(x, y);\n    addPoint(x + w, y);\n    addPoint(x, y + h);\n    addPoint(x + w, y + h);\n    return ctx;\n  };\n  const ellipse = (x, y, rx, ry) => {\n    ry = ry || rx;\n    addPoint(x - rx, y - ry);\n    addPoint(x + rx, y - ry);\n    addPoint(x + rx, y + ry);\n    addPoint(x - rx, y + ry);\n    return ctx;\n  };\n  const polygon = function () {\n    points.push(...arguments);\n    return ctx;\n  };\n\n  // Change dimensions\n  ctx.rect = rect;\n  ctx.moveTo = moveTo;\n  ctx.lineTo = moveTo;\n  ctx.circle = ellipse;\n  ctx.polygon = polygon;\n  ctx.ellipse = ellipse;\n  ctx.roundedRect = rect;\n\n  // To be implemented\n  ctx.text = nil;\n  ctx.path = nil;\n  ctx.lineWidth = nil;\n  ctx.bezierCurveTo = nil;\n  ctx.quadraticCurveTo = nil;\n  ctx.scale = nil;\n  ctx.rotate = nil;\n  ctx.translate = nil;\n\n  // These don't change dimensions\n  ctx.dash = nil;\n  ctx.clip = nil;\n  ctx.save = nil;\n  ctx.fill = nil;\n  ctx.font = nil;\n  ctx.stroke = nil;\n  ctx.lineCap = nil;\n  ctx.opacity = nil;\n  ctx.restore = nil;\n  ctx.lineJoin = nil;\n  ctx.fontSize = nil;\n  ctx.fillColor = nil;\n  ctx.miterLimit = nil;\n  ctx.strokeColor = nil;\n  ctx.fillOpacity = nil;\n  ctx.strokeOpacity = nil;\n  ctx.linearGradient = nil;\n  ctx.radialGradient = nil;\n  ctx.getWidth = () => getMax(points.map(p => p[0]));\n  ctx.getHeight = () => getMax(points.map(p => p[1]));\n  return ctx;\n};\n\n/**\n * @typedef {Function} MeasureCanvas\n * @returns {{ width: number, height: number }} canvas width and height\n */\n\n/**\n * Yoga canvas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {MeasureCanvas} measure canvas\n */\nconst measureCanvas = (page, node) => () => {\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page);\n  const pageArea = isHeightAuto(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT;\n  const ctx = measureCtx();\n  node.props.paint(ctx);\n  const width = ctx.getWidth();\n  const height = Math.min(pageArea, ctx.getHeight());\n  return {\n    width,\n    height\n  };\n};\nconst isType$1 = type => node => node.type === type;\nconst isSvg = isType$1(P.Svg);\nconst isText$2 = isType$1(P.Text);\nconst isNote = isType$1(P.Note);\nconst isPage = isType$1(P.Page);\nconst isImage = isType$1(P.Image);\nconst isCanvas = isType$1(P.Canvas);\nconst isTextInstance$1 = isType$1(P.TextInstance);\nconst setNodeHeight = node => {\n  const value = isPage(node) ? node.box.height : node.style.height;\n  return setHeight(value);\n};\n\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst setYogaValues = node => {\n  compose(setNodeHeight(node), setWidth(node.style.width), setMinWidth(node.style.minWidth), setMaxWidth(node.style.maxWidth), setMinHeight(node.style.minHeight), setMaxHeight(node.style.maxHeight), setMarginTop(node.style.marginTop), setMarginRight(node.style.marginRight), setMarginBottom(node.style.marginBottom), setMarginLeft(node.style.marginLeft), setPaddingTop(node.style.paddingTop), setPaddingRight(node.style.paddingRight), setPaddingBottom(node.style.paddingBottom), setPaddingLeft(node.style.paddingLeft), setPositionType(node.style.position), setPositionTop(node.style.top), setPositionRight(node.style.right), setPositionBottom(node.style.bottom), setPositionLeft(node.style.left), setBorderTop(node.style.borderTopWidth), setBorderRight(node.style.borderRightWidth), setBorderBottom(node.style.borderBottomWidth), setBorderLeft(node.style.borderLeftWidth), setDisplay(node.style.display), setFlexDirection(node.style.flexDirection), setAlignSelf(node.style.alignSelf), setAlignContent(node.style.alignContent), setAlignItems(node.style.alignItems), setJustifyContent(node.style.justifyContent), setFlexWrap(node.style.flexWrap), setOverflow(node.style.overflow), setAspectRatio(node.style.aspectRatio), setFlexBasis(node.style.flexBasis), setFlexGrow(node.style.flexGrow), setFlexShrink(node.style.flexShrink), setRowGap(node.style.rowGap), setColumnGap(node.style.columnGap))(node);\n};\n\n/**\n * @typedef {Function} InsertYogaNodes\n * @param {Object} child child node\n * @returns {Object} node\n */\n\n/**\n * Inserts child into parent' yoga node\n *\n * @param {Object} parent parent\n * @returns {InsertYogaNodes} insert yoga nodes\n */\nconst insertYogaNodes = parent => child => {\n  parent.insertChild(child.yogaNode, parent.getChildCount());\n  return child;\n};\nconst setMeasureFunc = (node, page, fontStore) => {\n  const {\n    yogaNode\n  } = node;\n  if (isText$2(node)) {\n    yogaNode.setMeasureFunc(measureText(page, node, fontStore));\n  }\n  if (isImage(node)) {\n    yogaNode.setMeasureFunc(measureImage(page, node));\n  }\n  if (isCanvas(node)) {\n    yogaNode.setMeasureFunc(measureCanvas(page, node));\n  }\n  if (isSvg(node)) {\n    yogaNode.setMeasureFunc(measureCanvas$1(page, node));\n  }\n  return node;\n};\nconst isLayoutElement = node => !isText$2(node) && !isNote(node) && !isSvg(node);\n\n/**\n * @typedef {Function} CreateYogaNodes\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\n\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @returns {CreateYogaNodes} create yoga nodes\n */\nconst createYogaNodes = (page, fontStore, yoga) => node => {\n  const yogaNode = yoga.node.create();\n  const result = Object.assign({}, node, {\n    yogaNode\n  });\n  setYogaValues(result);\n  if (isLayoutElement(node) && node.children) {\n    const resolveChild = compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore, yoga));\n    result.children = node.children.map(resolveChild);\n  }\n  setMeasureFunc(result, page, fontStore);\n  return result;\n};\n\n/**\n * Performs yoga calculation\n *\n * @param {Object} page page node\n * @returns {Object} page node\n */\nconst calculateLayout = page => {\n  page.yogaNode.calculateLayout();\n  return page;\n};\n\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param {Object} node\n * @returns {Object} node with box data\n */\nconst persistDimensions = node => {\n  if (isTextInstance$1(node)) return node;\n  const box = Object.assign(getPadding(node), getMargin(node), getBorderWidth(node), getPosition(node), getDimension(node));\n  const newNode = Object.assign({}, node, {\n    box\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(persistDimensions);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n\n/**\n * Removes yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\nconst destroyYogaNodes = node => {\n  const newNode = Object.assign({}, node);\n  delete newNode.yogaNode;\n  if (!node.children) return newNode;\n  const children = node.children.map(destroyYogaNodes);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n\n/**\n * Free yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\nconst freeYogaNodes = node => {\n  if (node.yogaNode) node.yogaNode.freeRecursive();\n  return node;\n};\n\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param {Object} page object\n * @returns {Object} page object with correct 'box' layout attributes\n */\nconst resolvePageDimensions = (page, fontStore, yoga) => {\n  if (isNil(page)) return null;\n  return compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore, yoga))(page);\n};\n\n/**\n * Calculates root object layout using Yoga.\n *\n * @param {Object} node root object\n * @param {Object} fontStore font store\n * @returns {Object} root object with correct 'box' layout attributes\n */\nconst resolveDimensions = (node, fontStore) => {\n  if (!node.children) return node;\n  const resolveChild = child => resolvePageDimensions(child, fontStore, node.yoga);\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-continue */\n/* eslint-disable prefer-destructuring */\n\nconst isText$1 = node => node.type === P.Text;\n\n// Prevent splitting elements by low decimal numbers\nconst SAFETY_THRESHOLD = 0.001;\nconst assingChildren = (children, node) => Object.assign({}, node, {\n  children\n});\nconst getTop = node => {\n  var _node$box;\n  return ((_node$box = node.box) === null || _node$box === void 0 ? void 0 : _node$box.top) || 0;\n};\nconst allFixed = nodes => nodes.every(isFixed);\nconst isDynamic = node => {\n  var _node$props;\n  return !isNil((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.render);\n};\nconst relayoutPage = compose(resolveTextLayout, resolvePageDimensions, resolveInheritance, resolvePageStyles);\nconst warnUnavailableSpace = node => {\n  console.warn(\"Node of type \".concat(node.type, \" can't wrap between pages and it's bigger than available page height\"));\n};\nconst splitNodes = (height, contentArea, nodes) => {\n  const currentChildren = [];\n  const nextChildren = [];\n  for (let i = 0; i < nodes.length; i += 1) {\n    const child = nodes[i];\n    const futureNodes = nodes.slice(i + 1);\n    const futureFixedNodes = futureNodes.filter(isFixed);\n    const nodeTop = getTop(child);\n    const nodeHeight = child.box.height;\n    const isOutside = height <= nodeTop;\n    const shouldBreak$1 = shouldBreak(child, futureNodes, height);\n    const shouldSplit = height + SAFETY_THRESHOLD < nodeTop + nodeHeight;\n    const canWrap = getWrap(child);\n    const fitsInsidePage = nodeHeight <= contentArea;\n    if (isFixed(child)) {\n      nextChildren.push(child);\n      currentChildren.push(child);\n      continue;\n    }\n    if (isOutside) {\n      const box = Object.assign({}, child.box, {\n        top: child.box.top - height\n      });\n      const next = Object.assign({}, child, {\n        box\n      });\n      nextChildren.push(next);\n      continue;\n    }\n    if (!fitsInsidePage && !canWrap) {\n      currentChildren.push(child);\n      nextChildren.push(...futureNodes);\n      warnUnavailableSpace(child);\n      break;\n    }\n    if (shouldBreak$1) {\n      const box = Object.assign({}, child.box, {\n        top: child.box.top - height\n      });\n      const props = Object.assign({}, child.props, {\n        wrap: true,\n        break: false\n      });\n      const next = Object.assign({}, child, {\n        box,\n        props\n      });\n      currentChildren.push(...futureFixedNodes);\n      nextChildren.push(next, ...futureNodes);\n      break;\n    }\n    if (shouldSplit) {\n      const [currentChild, nextChild] = split(child, height, contentArea);\n\n      // All children are moved to the next page, it doesn't make sense to show the parent on the current page\n      if (child.children.length > 0 && currentChild.children.length === 0) {\n        // But if the current page is empty then we can just include the parent on the current page\n        if (currentChildren.length === 0) {\n          currentChildren.push(child, ...futureFixedNodes);\n          nextChildren.push(...futureNodes);\n        } else {\n          const box = Object.assign({}, child.box, {\n            top: child.box.top - height\n          });\n          const next = Object.assign({}, child, {\n            box\n          });\n          currentChildren.push(...futureFixedNodes);\n          nextChildren.push(next, ...futureNodes);\n        }\n        break;\n      }\n      if (currentChild) currentChildren.push(currentChild);\n      if (nextChild) nextChildren.push(nextChild);\n      continue;\n    }\n    currentChildren.push(child);\n  }\n  return [currentChildren, nextChildren];\n};\nconst splitChildren = (height, contentArea, node) => {\n  const children = node.children || [];\n  const availableHeight = height - getTop(node);\n  return splitNodes(availableHeight, contentArea, children);\n};\nconst splitView = (node, height, contentArea) => {\n  const [currentNode, nextNode] = splitNode(node, height);\n  const [currentChilds, nextChildren] = splitChildren(height, contentArea, node);\n  return [assingChildren(currentChilds, currentNode), assingChildren(nextChildren, nextNode)];\n};\nconst split = (node, height, contentArea) => isText$1(node) ? splitText(node, height) : splitView(node, height, contentArea);\nconst shouldResolveDynamicNodes = node => {\n  const children = node.children || [];\n  return isDynamic(node) || children.some(shouldResolveDynamicNodes);\n};\nconst resolveDynamicNodes = (props, node) => {\n  const isNodeDynamic = isDynamic(node);\n\n  // Call render prop on dynamic nodes and append result to children\n  const resolveChildren = function (children) {\n    if (children === void 0) {\n      children = [];\n    }\n    if (isNodeDynamic) {\n      const res = node.props.render(props);\n      return createInstances(res).filter(Boolean).map(n => resolveDynamicNodes(props, n));\n    }\n    return children.map(c => resolveDynamicNodes(props, c));\n  };\n\n  // We reset dynamic text box so it can be computed again later on\n  const resetHeight = isNodeDynamic && isText$1(node);\n  const box = resetHeight ? _objectSpread(_objectSpread({}, node.box), {}, {\n    height: 0\n  }) : node.box;\n  const children = resolveChildren(node.children);\n  const lines = isNodeDynamic ? null : node.lines;\n  return Object.assign({}, node, {\n    box,\n    lines,\n    children\n  });\n};\nconst resolveDynamicPage = (props, page, fontStore, yoga) => {\n  if (shouldResolveDynamicNodes(page)) {\n    const resolvedPage = resolveDynamicNodes(props, page);\n    return relayoutPage(resolvedPage, fontStore, yoga);\n  }\n  return page;\n};\nconst splitPage = (page, pageNumber, fontStore, yoga) => {\n  const wrapArea = getWrapArea(page);\n  const contentArea = getContentArea(page);\n  const dynamicPage = resolveDynamicPage({\n    pageNumber\n  }, page, fontStore, yoga);\n  const height = page.style.height;\n  const [currentChilds, nextChilds] = splitNodes(wrapArea, contentArea, dynamicPage.children);\n  const relayout = node => relayoutPage(node, fontStore, yoga);\n  const currentBox = _objectSpread(_objectSpread({}, page.box), {}, {\n    height\n  });\n  const currentPage = relayout(Object.assign({}, page, {\n    box: currentBox,\n    children: currentChilds\n  }));\n  if (nextChilds.length === 0 || allFixed(nextChilds)) return [currentPage, null];\n  const nextBox = omit('height', page.box);\n  const nextProps = omit('bookmark', page.props);\n  const nextPage = relayout(Object.assign({}, page, {\n    props: nextProps,\n    box: nextBox,\n    children: nextChilds\n  }));\n  return [currentPage, nextPage];\n};\nconst resolvePageIndices = (fontStore, yoga, page, pageNumber, pages) => {\n  const totalPages = pages.length;\n  const props = {\n    totalPages,\n    pageNumber: pageNumber + 1,\n    subPageNumber: page.subPageNumber + 1,\n    subPageTotalPages: page.subPageTotalPages\n  };\n  return resolveDynamicPage(props, page, fontStore, yoga);\n};\nconst assocSubPageData = subpages => {\n  return subpages.map((page, i) => _objectSpread(_objectSpread({}, page), {}, {\n    subPageNumber: i,\n    subPageTotalPages: subpages.length\n  }));\n};\nconst dissocSubPageData = page => {\n  return omit(['subPageNumber', 'subPageTotalPages'], page);\n};\nconst paginate = (page, pageNumber, fontStore, yoga) => {\n  var _page$props;\n  if (!page) return [];\n  if (((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.wrap) === false) return [page];\n  let splittedPage = splitPage(page, pageNumber, fontStore, yoga);\n  const pages = [splittedPage[0]];\n  let nextPage = splittedPage[1];\n  while (nextPage !== null) {\n    splittedPage = splitPage(nextPage, pageNumber + pages.length, fontStore, yoga);\n    pages.push(splittedPage[0]);\n    nextPage = splittedPage[1];\n  }\n  return pages;\n};\n\n/**\n * Performs pagination. This is the step responsible of breaking the whole document\n * into pages following pagiation rules, such as `fixed`, `break` and dynamic nodes.\n *\n * @param {Object} doc node\n * @param {Object} fontStore font store\n * @returns {Object} layout node\n */\nconst resolvePagination = (doc, fontStore) => {\n  let pages = [];\n  let pageNumber = 1;\n  for (let i = 0; i < doc.children.length; i += 1) {\n    const page = doc.children[i];\n    let subpages = paginate(page, pageNumber, fontStore, doc.yoga);\n    subpages = assocSubPageData(subpages);\n    pageNumber += subpages.length;\n    pages = pages.concat(subpages);\n  }\n  pages = pages.map(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return dissocSubPageData(resolvePageIndices(fontStore, doc.yoga, ...args));\n  });\n  return assingChildren(pages, doc);\n};\n\n/**\n * @typedef {Function} ResolvePageHorizontalPadding\n * @param {string} value padding value\n * @returns {Object} translated padding value\n */\n\n/**\n * Translates page percentage horizontal paddings in fixed ones\n *\n * @param {Object} container page container\n * @returns {ResolvePageHorizontalPadding} resolve page horizontal padding\n */\nconst resolvePageHorizontalPadding = container => value => {\n  const match = matchPercent(value);\n  return match ? match.percent * container.width : value;\n};\n\n/**\n * @typedef {Function} ResolvePageVerticalPadding\n * @param {string} padding value\n * @returns {Object} translated padding value\n */\n\n/**\n * Translates page percentage vertical paddings in fixed ones\n *\n * @param {Object} container page container\n * @returns {ResolvePageVerticalPadding} resolve page vertical padding\n */\nconst resolvePageVerticalPadding = container => value => {\n  const match = matchPercent(value);\n  return match ? match.percent * container.height : value;\n};\n\n/**\n * Translates page percentage paddings in fixed ones\n *\n * @param {Object} page\n * @returns {Object} page with fixed paddings\n */\nconst resolvePagePaddings = page => {\n  const container = page.style;\n  const style = evolve({\n    paddingTop: resolvePageVerticalPadding(container),\n    paddingLeft: resolvePageHorizontalPadding(container),\n    paddingRight: resolvePageHorizontalPadding(container),\n    paddingBottom: resolvePageVerticalPadding(container)\n  }, page.style);\n  return Object.assign({}, page, {\n    style\n  });\n};\n\n/**\n * Translates all pages percentage paddings in fixed ones\n * This has to be computed from pages calculated size and not by Yoga\n * because at this point we didn't performed pagination yet.\n *\n * @param {Object} root document root\n * @returns {Object} document root with translated page paddings\n */\nconst resolvePagesPaddings = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePagePaddings);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\n/**\n * @typedef {Function} ResolveRadius\n * @param {string | number} value border radius value\n * @returns {number} resolved radius value\n */\n\n/**\n *\n * @param {{ width: number, height: number }} container width and height\n * @returns {ResolveRadius} resolve radius function\n */\nconst resolveRadius = container => value => {\n  if (!value) return undefined;\n  const match = matchPercent(value);\n  return match ? match.percent * Math.min(container.width, container.height) : value;\n};\n\n/**\n * Transforms percent border radius into fixed values\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst resolvePercentRadius = node => {\n  const style = evolve({\n    borderTopLeftRadius: resolveRadius(node.box),\n    borderTopRightRadius: resolveRadius(node.box),\n    borderBottomRightRadius: resolveRadius(node.box),\n    borderBottomLeftRadius: resolveRadius(node.box)\n  }, node.style || {});\n  const newNode = Object.assign({}, node, {\n    style\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(resolvePercentRadius);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n\n/**\n * Transform percent height into fixed\n *\n * @param {number} height\n * @returns {number} height\n */\nconst transformHeight = (pageArea, height) => {\n  const match = matchPercent(height);\n  return match ? match.percent * pageArea : height;\n};\n\n/**\n * Get page area (height minus paddings)\n *\n * @param {Object} page\n * @returns {number} page area\n */\nconst getPageArea = page => {\n  var _page$style, _page$style2;\n  const pageHeight = page.style.height;\n  const pagePaddingTop = ((_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.paddingTop) || 0;\n  const pagePaddingBottom = ((_page$style2 = page.style) === null || _page$style2 === void 0 ? void 0 : _page$style2.paddingBottom) || 0;\n  return pageHeight - pagePaddingTop - pagePaddingBottom;\n};\n\n/**\n * Transform node percent height to fixed\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {Object} transformed node\n */\nconst resolveNodePercentHeight = (page, node) => {\n  var _page$style3, _node$style;\n  if (isNil((_page$style3 = page.style) === null || _page$style3 === void 0 ? void 0 : _page$style3.height)) return node;\n  if (isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.height)) return node;\n  const pageArea = getPageArea(page);\n  const height = transformHeight(pageArea, node.style.height);\n  const style = Object.assign({}, node.style, {\n    height\n  });\n  return Object.assign({}, node, {\n    style\n  });\n};\n\n/**\n * Transform page immediate children with percent height to fixed\n *\n * @param {Object} page\n * @returns {Object} transformed page\n */\nconst resolvePagePercentHeight = page => {\n  if (!page.children) return page;\n  const resolveChild = child => resolveNodePercentHeight(page, child);\n  const children = page.children.map(resolveChild);\n  return Object.assign({}, page, {\n    children\n  });\n};\n\n/**\n * Transform all page immediate children with percent height to fixed.\n * This is needed for computing correct dimensions on pre-pagination layout.\n *\n * @param {Object} root document root\n * @returns {Object} transformed document root\n */\nconst resolvePercentHeight = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePagePercentHeight);\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst isType = type => node => node.type === type;\nconst isLink = isType(P.Link);\nconst isText = isType(P.Text);\nconst isTextInstance = isType(P.TextInstance);\n\n/**\n * Checks if node has render prop\n *\n * @param {Object} node\n * @returns {boolean} has render prop?\n */\nconst hasRenderProp = node => {\n  var _node$props;\n  return !!((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.render);\n};\n\n/**\n * Checks if node is text type (Text or TextInstance)\n *\n * @param {Object} node\n * @returns {boolean} are all children text instances?\n */\nconst isTextType = node => isText(node) || isTextInstance(node);\n\n/**\n * Checks if is tet link that needs to be wrapped in Text\n *\n * @param {Object} node\n * @returns {boolean} are all children text instances?\n */\nconst isTextLink = node => {\n  const children = node.children || [];\n\n  // Text string inside a Link\n  if (children.every(isTextInstance)) return true;\n\n  // Text node inside a Link\n  if (children.every(isText)) return false;\n  return children.every(isTextType);\n};\n\n/**\n * Wraps node children inside Text node\n *\n * @param {Object} node\n * @returns {boolean} node with intermediate Text child\n */\nconst wrapText = node => {\n  const textElement = {\n    type: P.Text,\n    props: {},\n    style: {},\n    box: {},\n    children: node.children\n  };\n  return Object.assign({}, node, {\n    children: [textElement]\n  });\n};\nconst transformLink = node => {\n  if (!isLink(node)) return node;\n\n  // If has render prop substitute the instance by a Text, that will\n  // ultimately render the inline Link via the textkit PDF renderer.\n  if (hasRenderProp(node)) return Object.assign({}, node, {\n    type: P.Text\n  });\n\n  // If is a text link (either contains Text or TextInstalce), wrap it\n  // inside a Text element so styles are applied correctly\n\n  if (isTextLink(node)) return wrapText(node);\n  return node;\n};\n\n/**\n * Transforms Link layout to correctly render text and dynamic rendered links\n *\n * @param {Object} node\n * @returns {Object} node with link substitution\n */\nconst resolveLinkSubstitution = node => {\n  if (!node.children) return node;\n  const resolveChild = compose(transformLink, resolveLinkSubstitution);\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst layout = asyncCompose(resolveZIndex, resolveOrigin, resolveAssets, resolvePagination, resolveTextLayout, resolvePercentRadius, resolveDimensions, resolveSvg, resolveAssets, resolveInheritance, resolvePercentHeight, resolvePagesPaddings, resolveStyles, resolveLinkSubstitution, resolveBookmarks, resolvePageSizes, resolveYoga);\nexport { layout as default };","map":{"version":3,"names":["upperFirst","capitalize","last","pick","compose","evolve","mapValues","matchPercent","isNil","get","castArray","omit","asyncCompose","P","TextInstance","stylesheet","transformColor","processTransform","flatten","layoutEngine","bidi","linebreaker","justification","textDecoration","scriptItemizer","wordHyphenation","PDFFont","Yoga","loadYoga","loadYoga$1","emojiRegex","resolveImage","fromFragments","fragments","offset","string","runs","forEach","fragment","push","start","end","length","attributes","transformText","text","transformation","toUpperCase","toLowerCase","StandardFont","constructor","src","name","open","encode","str","layout","encoded","positions","stringIndices","map","_","i","glyphs","g","glyph","getGlyph","parseInt","advanceWidth","glyphForCodePoint","codePoint","id","_font","codePoints","isLigature","font","characterToGlyph","hasGlyphForCodePoint","ascent","capHeight","xHeight","descent","lineGap","unitsPerEm","fontCache","IGNORED_CODE_POINTS","getFontSize","node","fontSize","getOrCreateFont","getFallbackFont","pickFontFromFontStack","fontStack","lastFont","fontStackWithFallback","includes","fontSubstitution","_ref","lastFontSize","lastIndex","index","res","run","defaultFont","chars","slice","j","char","codePointAt","scale","isTextInstance$4","type","engines$1","engine$1","getFragments$1","fontStore","instance","fill","fontFamily","fontWeight","fontStyle","textDecorationColor","textDecorationStyle","textTransform","opacity","props","_textDecoration","fontFamilies","fontFamilyName","opts","obj","getFont","data","color","underlineStyle","underline","underlineColor","strike","strikeStyle","strikeColor","children","child","value","getAttributedString$1","AlmostInfinity","shrinkWhitespaceFactor","before","after","layoutTspan","_node$props","_node$props2","attributedString","x","y","container","width","height","hyphenationCallback","getHyphenationCallback","layoutOptions","lines","flat","Object","assign","layoutText$1","isDefs","Defs","getDefs","defs","find","values","reduce","acc","_value$props","isNotDefs","detachDefs","filter","URL_REGEX","replaceDef","undefined","test","match","parseNodeDefs","clipPath","parseDefs","root","replaceDefs","parseViewbox","split","parseFloat","minX","minY","maxX","maxY","getContainer$1","viewbox","viewBox","SVG_INHERITED_PROPS","getInheritProps","inheritProps","inheritedProps","newChild","parseAspectRatio","replace","align","meetOrSlice","STYLE_PROPS","VERTICAL_PROPS","HORIZONTAL_PROPS","isType$3","isSvg$3","Svg","isText$5","Text","isTextInstance$3","transformPercent","key","percent","parsePercent","parseProps","x1","x2","y1","y2","r","rx","ry","cx","cy","stroke","stopOpacity","stopColor","transform","mergeStyles$1","style","removeNoneValues","removeNone","pickStyleProps","styleProps","parseSvgProps","preserveAspectRatio","wrapBetweenTspan","Tspan","addMissingTspan","resolveChild","parseText","resolveSvgNode","resolveChildren","resolveSvgRoot","resolveSvg","instancePromise","_instancePromise","config","Config","create","setPointScaleFactor","Node","createWithConfig","resolveYoga","yoga","getZIndex","zIndex","shouldSort","Document","sortZIndex","a","b","za","zb","resolveZIndex","sortedChildren","sort","emojis","regex","reflect","promise","arguments","then","v","e","makeFetchEmojiImage","_removeVariationSelectors","getCodePoints","withVariationSelectors","Array","from","toString","join","buildEmojiUrl","emoji","source","url","format","builder","concat","fetchEmojis","promises","matchAll","loading","emojiUrl","fetchEmojiImage","uri","image","embedEmojis","result","emojiSize","chunk","String","fromCharCode","_objectSpread","attachment","yOffset","Math","floor","getSource","_node$props3","href","resolveSource","fetchImage","cache","console","warn","Error","message","isImage$2","Image","fetchAssets","_node$children","listToExplore","emojiSource","getEmojiSource","_n$style","n","shift","load","childNode","resolveAssets","Promise","all","isLink$1","Link","DEFAULT_LINK_STYLES","computeStyle","baseStyle","isArray","resolveNodeStyles","resolvePageStyles","page","_page$box","_page$box2","_page$props","_page$style","dpi","box","orientation","remBase","resolveStyles","getTransformStyle","s","_node$style","_node$style2","getOrigin","left","top","transformOriginX","transformOriginY","percentX","percentY","offsetX","offsetY","resolveNodeOrigin","origin","newNode","resolveOrigin","getBookmarkValue","title","fit","expanded","resolveBookmarks","refs","parent","_child$props","element","bookmark","_parent","ref","newHierarchy","VALID_ORIENTATIONS","getOrientation","isLandscape","PAGE_SIZES","A0","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","B0","B1","B2","B3","B4","B5","B6","B7","B8","B9","B10","C0","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","RA0","RA1","RA2","RA3","RA4","SRA0","SRA1","SRA2","SRA3","SRA4","EXECUTIVE","FOLIO","LEGAL","LETTER","TABLOID","ID1","toSizeObject","flipSizeObject","adjustDpi","getStringSize","getNumberSize","getSize","_page$props2","size","resolvePageSize","resolvePageSizes","isFixed","fixed","lineIndexAtHeight","line","heightAtLineIndex","counter","getLineBreak","widows","orphans","linesQuantity","slicedLine","splitText","slicedLineIndex","currentHeight","nextHeight","current","borderBottomWidth","marginBottom","paddingBottom","borderBottomLeftRadius","borderBottomRightRadius","next","borderTopWidth","marginTop","paddingTop","borderTopLeftRadius","borderTopRightRadius","getTop$1","_node$box","hasFixedHeight","splitNode","nodeTop","NON_WRAP_TYPES","Note","Canvas","getWrap","wrap","getComputedPadding","edge","yogaNode","getPadding","Edge","Top","paddingVertical","padding","paddingRight","Right","paddingHorizontal","Bottom","paddingLeft","Left","getWrapArea","getContentArea","isString","isNumber","isFragment","Symbol","for","createInstances","el","_objectWithoutProperties","_excluded","nextChildren","getBreak","break","getMinPresenceAhead","minPresenceAhead","getFurthestEnd","elements","max","getEndOfMinPresenceAhead","getEndOfPresence","futureElements","afterMinPresenceAhead","endOfFurthestFutureElement","min","shouldBreak","shouldSplit","canWrap","endOfPresence","breakingImprovesPresence","IGNORABLE_CODEPOINTS","buildSubsetForFont","ignoreChars","charSubset","subsetRegex","RegExp","PREPROCESSORS","isImage$1","isTextInstance$2","getFragments","parentLink","level","_instance$props","_instance$props2","direction","textAlign","lineHeight","letterSpacing","textIndent","verticalAlign","backgroundColor","indent","characterSpacing","link","preprocessor","getAttributedString","engines","engine","getMaxLines","maxLines","getTextOverflow","textOverflow","getContainer","Infinity","truncateMode","getLayoutOptions","hyphenationPenalty","layoutText","options","isType$2","isSvg$2","isText$4","shouldIterate","shouldLayoutText","resolveTextLayout","mapChild","BASE_INHERITABLE_PROPERTIES","TEXT_INHERITABLE_PROPERTIES","isSvg$1","isText$3","mergeValues","styleName","inheritedValue","merge","inheritedStyles","mergedStyles","entries","mergeStyles","resolveInheritance","inheritableProperties","inheritStyles","getComputedMargin","getMargin","marginVertical","margin","marginRight","marginHorizontal","marginLeft","getPosition","getComputedTop","right","getComputedRight","bottom","getComputedBottom","getComputedLeft","DEFAULT_DIMENSION","getDimension","getComputedWidth","getComputedHeight","getComputedBorder","getBorderWidth","borderRightWidth","borderLeftWidth","setDisplay","Display","None","Flex","OVERFLOW","hidden","Overflow","Hidden","scroll","Scroll","setOverflow","overflow","Visible","FLEX_WRAP","Wrap","WrapReverse","setFlexWrap","flexWrap","NoWrap","setYogaValue","attr","hasEdge","fixedMethod","autoMethod","percentMethod","_yogaNode$percentMeth","call","_yogaNode$percentMeth2","_yogaNode$autoMethod","_yogaNode$autoMethod2","_yogaNode$fixedMethod","_yogaNode$fixedMethod2","setFlexGrow","setFlexBasis","ALIGN","Align","FlexStart","center","Center","FlexEnd","stretch","Stretch","baseline","Baseline","SpaceBetween","SpaceAround","SpaceEvenly","setAlign","defaultValue","Auto","setAlignSelf","setAlignItems","setFlexShrink","setAspectRatio","setAlignContent","POSITION","absolute","PositionType","Absolute","relative","Relative","static","Static","setPositionType","FLEX_DIRECTIONS","row","FlexDirection","Row","RowReverse","ColumnReverse","setFlexDirection","flexDirection","Column","JUSTIFY_CONTENT","Justify","setJustifyContent","justifyContent","setMarginTop","setMarginRight","setMarginBottom","setMarginLeft","setPaddingTop","setPaddingRight","setPaddingBottom","setPaddingLeft","setBorderTop","setBorderRight","setBorderBottom","setBorderLeft","setPositionTop","setPositionRight","setPositionBottom","setPositionLeft","setWidth","setMinWidth","setMaxWidth","setHeight","setMinHeight","setMaxHeight","setRowGap","setGap","Gutter","setColumnGap","getAspectRatio","measureCanvas$1","widthMode","heightMode","aspectRatio","MeasureMode","Exactly","AtMost","linesWidth","xAdvance","linesHeight","ALIGNMENT_FACTORS","measureText","alignFactor","alignOffset","getRatio","_node$image","isHeightAuto","SAFETY_HEIGHT$1","measureImage","imageRatio","imageMargin","pagePadding","pageArea","Undefined","scaledHeight","SAFETY_HEIGHT","getMax","measureCtx","ctx","points","nil","addPoint","moveTo","rect","w","h","ellipse","polygon","lineTo","circle","roundedRect","path","lineWidth","bezierCurveTo","quadraticCurveTo","rotate","translate","dash","clip","save","lineCap","restore","lineJoin","fillColor","miterLimit","strokeColor","fillOpacity","strokeOpacity","linearGradient","radialGradient","getWidth","p","getHeight","measureCanvas","paint","isType$1","isSvg","isText$2","isNote","isPage","Page","isImage","isCanvas","isTextInstance$1","setNodeHeight","setYogaValues","minWidth","maxWidth","minHeight","maxHeight","position","display","alignSelf","alignContent","alignItems","flexBasis","flexGrow","flexShrink","rowGap","columnGap","insertYogaNodes","insertChild","getChildCount","setMeasureFunc","isLayoutElement","createYogaNodes","calculateLayout","persistDimensions","destroyYogaNodes","freeYogaNodes","freeRecursive","resolvePageDimensions","resolveDimensions","isText$1","SAFETY_THRESHOLD","assingChildren","getTop","allFixed","nodes","every","isDynamic","render","relayoutPage","warnUnavailableSpace","splitNodes","contentArea","currentChildren","futureNodes","futureFixedNodes","nodeHeight","isOutside","shouldBreak$1","fitsInsidePage","currentChild","nextChild","splitChildren","availableHeight","splitView","currentNode","nextNode","currentChilds","shouldResolveDynamicNodes","some","resolveDynamicNodes","isNodeDynamic","Boolean","c","resetHeight","resolveDynamicPage","resolvedPage","splitPage","pageNumber","wrapArea","dynamicPage","nextChilds","relayout","currentBox","currentPage","nextBox","nextProps","nextPage","resolvePageIndices","pages","totalPages","subPageNumber","subPageTotalPages","assocSubPageData","subpages","dissocSubPageData","paginate","splittedPage","resolvePagination","doc","_len","args","_key","resolvePageHorizontalPadding","resolvePageVerticalPadding","resolvePagePaddings","resolvePagesPaddings","resolveRadius","resolvePercentRadius","transformHeight","getPageArea","_page$style2","pageHeight","pagePaddingTop","pagePaddingBottom","resolveNodePercentHeight","_page$style3","resolvePagePercentHeight","resolvePercentHeight","isType","isLink","isText","isTextInstance","hasRenderProp","isTextType","isTextLink","wrapText","textElement","transformLink","resolveLinkSubstitution","default"],"sources":["/home/sofiane/Desktop/Crop Nutrition Optimizer/frontend/node_modules/@react-pdf/layout/lib/index.js"],"sourcesContent":["import { upperFirst, capitalize, last, pick, compose, evolve, mapValues, matchPercent, isNil, get, castArray, omit, asyncCompose } from '@react-pdf/fns';\nimport * as P from '@react-pdf/primitives';\nimport { TextInstance } from '@react-pdf/primitives';\nimport stylesheet, { transformColor, processTransform, flatten } from '@react-pdf/stylesheet';\nimport layoutEngine, { bidi, linebreaker, justification, textDecoration, scriptItemizer, wordHyphenation } from '@react-pdf/textkit';\nimport { PDFFont } from '@react-pdf/pdfkit';\nimport * as Yoga from 'yoga-layout/load';\nimport { loadYoga as loadYoga$1 } from 'yoga-layout/load';\nimport emojiRegex from 'emoji-regex';\nimport resolveImage from '@react-pdf/image';\n\n/**\n * Create attributed string from text fragments\n *\n * @param {Object[]} fragments fragments\n * @returns {Object} attributed string\n */\nconst fromFragments = fragments => {\n  let offset = 0;\n  let string = '';\n  const runs = [];\n  fragments.forEach(fragment => {\n    string += fragment.string;\n    runs.push({\n      start: offset,\n      end: offset + fragment.string.length,\n      attributes: fragment.attributes || {}\n    });\n    offset += fragment.string.length;\n  });\n  return {\n    string,\n    runs\n  };\n};\n\n/**\n * Apply transformation to text string\n *\n * @param {string} text\n * @param {string} transformation type\n * @returns {string} transformed text\n */\nconst transformText = (text, transformation) => {\n  switch (transformation) {\n    case 'uppercase':\n      return text.toUpperCase();\n    case 'lowercase':\n      return text.toLowerCase();\n    case 'capitalize':\n      return capitalize(text);\n    case 'upperfirst':\n      return upperFirst(text);\n    default:\n      return text;\n  }\n};\n\n/* eslint-disable class-methods-use-this */\n\nclass StandardFont {\n  constructor(src) {\n    this.name = src;\n    this.src = PDFFont.open(null, src);\n  }\n  encode(str) {\n    return this.src.encode(str);\n  }\n  layout(str) {\n    const [encoded, positions] = this.encode(str);\n    return {\n      positions,\n      stringIndices: positions.map((_, i) => i),\n      glyphs: encoded.map((g, i) => {\n        const glyph = this.getGlyph(parseInt(g, 16));\n        glyph.advanceWidth = positions[i].advanceWidth;\n        return glyph;\n      })\n    };\n  }\n  glyphForCodePoint(codePoint) {\n    const glyph = this.getGlyph(codePoint);\n    glyph.advanceWidth = 400;\n    return glyph;\n  }\n  getGlyph(id) {\n    return {\n      id,\n      _font: this.src,\n      codePoints: [id],\n      isLigature: false,\n      name: this.src.font.characterToGlyph(id)\n    };\n  }\n  hasGlyphForCodePoint(codePoint) {\n    return this.src.font.characterToGlyph(codePoint) !== '.notdef';\n  }\n\n  // Based on empirical observation\n  get ascent() {\n    return 900;\n  }\n\n  // Based on empirical observation\n  get capHeight() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return 650;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return 550;\n      default:\n        return 690;\n    }\n  }\n\n  // Based on empirical observation\n  get xHeight() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return 440;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return 390;\n      default:\n        return 490;\n    }\n  }\n\n  // Based on empirical observation\n  get descent() {\n    switch (this.name) {\n      case 'Times-Roman':\n      case 'Times-Bold':\n      case 'Times-Italic':\n      case 'Times-BoldItalic':\n        return -220;\n      case 'Courier':\n      case 'Courier-Bold':\n      case 'Courier-Oblique':\n      case 'Courier-BoldOblique':\n        return -230;\n      default:\n        return -200;\n    }\n  }\n  get lineGap() {\n    return 0;\n  }\n  get unitsPerEm() {\n    return 1000;\n  }\n}\n\nconst fontCache = {};\nconst IGNORED_CODE_POINTS = [173];\nconst getFontSize = node => node.attributes.fontSize || 12;\nconst getOrCreateFont = name => {\n  if (fontCache[name]) return fontCache[name];\n  const font = new StandardFont(name);\n  fontCache[name] = font;\n  return font;\n};\nconst getFallbackFont = () => getOrCreateFont('Helvetica');\nconst pickFontFromFontStack = (codePoint, fontStack, lastFont) => {\n  const fontStackWithFallback = [...fontStack, lastFont, getFallbackFont()];\n  for (let i = 0; i < fontStackWithFallback.length; i += 1) {\n    const font = fontStackWithFallback[i];\n    if (!IGNORED_CODE_POINTS.includes(codePoint) && font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n      return font;\n    }\n  }\n  return getFallbackFont();\n};\nconst fontSubstitution = () => _ref => {\n  let {\n    string,\n    runs\n  } = _ref;\n  let lastFont = null;\n  let lastFontSize = null;\n  let lastIndex = 0;\n  let index = 0;\n  const res = [];\n  for (let i = 0; i < runs.length; i += 1) {\n    const run = runs[i];\n    const defaultFont = run.attributes.font.map(font => typeof font === 'string' ? getOrCreateFont(font) : font);\n    if (string.length === 0) {\n      res.push({\n        start: 0,\n        end: 0,\n        attributes: {\n          font: defaultFont\n        }\n      });\n      break;\n    }\n    const chars = string.slice(run.start, run.end);\n    for (let j = 0; j < chars.length; j += 1) {\n      const char = chars[j];\n      const codePoint = char.codePointAt();\n      // If the default font does not have a glyph and the fallback font does, we use it\n      const font = pickFontFromFontStack(codePoint, defaultFont, lastFont);\n      const fontSize = getFontSize(run);\n\n      // If anything that would impact res has changed, update it\n      if (font !== lastFont || fontSize !== lastFontSize || font.unitsPerEm !== lastFont.unitsPerEm) {\n        if (lastFont) {\n          res.push({\n            start: lastIndex,\n            end: index,\n            attributes: {\n              font: lastFont,\n              scale: lastFontSize / lastFont.unitsPerEm\n            }\n          });\n        }\n        lastFont = font;\n        lastFontSize = fontSize;\n        lastIndex = index;\n      }\n      index += char.length;\n    }\n  }\n  if (lastIndex < string.length) {\n    const fontSize = getFontSize(last(runs));\n    res.push({\n      start: lastIndex,\n      end: string.length,\n      attributes: {\n        font: lastFont,\n        scale: fontSize / lastFont.unitsPerEm\n      }\n    });\n  }\n  return {\n    string,\n    runs: res\n  };\n};\n\nconst isTextInstance$4 = node => node.type === P.TextInstance;\nconst engines$1 = {\n  bidi,\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution\n};\nconst engine$1 = layoutEngine(engines$1);\nconst getFragments$1 = (fontStore, instance) => {\n  if (!instance) return [{\n    string: ''\n  }];\n  const fragments = [];\n  const {\n    fill = 'black',\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    opacity\n  } = instance.props;\n  const _textDecoration = instance.props.textDecoration;\n  const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n  const font = fontFamilies.map(fontFamilyName => {\n    if (typeof fontFamilyName !== 'string') return fontFamilyName;\n    const opts = {\n      fontFamily: fontFamilyName,\n      fontWeight,\n      fontStyle\n    };\n    const obj = fontStore ? fontStore.getFont(opts) : null;\n    return obj ? obj.data : fontFamilyName;\n  });\n  const attributes = {\n    font,\n    opacity,\n    fontSize,\n    color: fill,\n    underlineStyle: textDecorationStyle,\n    underline: _textDecoration === 'underline' || _textDecoration === 'underline line-through' || _textDecoration === 'line-through underline',\n    underlineColor: textDecorationColor || fill,\n    strike: _textDecoration === 'line-through' || _textDecoration === 'underline line-through' || _textDecoration === 'line-through underline',\n    strikeStyle: textDecorationStyle,\n    strikeColor: textDecorationColor || fill\n  };\n  for (let i = 0; i < instance.children.length; i += 1) {\n    const child = instance.children[i];\n    if (isTextInstance$4(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes\n      });\n    } else if (child) {\n      fragments.push(...getFragments$1(child));\n    }\n  }\n  return fragments;\n};\nconst getAttributedString$1 = (fontStore, instance) => fromFragments(getFragments$1(fontStore, instance));\nconst AlmostInfinity = 999999999999;\nconst shrinkWhitespaceFactor = {\n  before: -0.5,\n  after: -0.5\n};\nconst layoutTspan = fontStore => node => {\n  var _node$props, _node$props2;\n  const attributedString = getAttributedString$1(fontStore, node);\n  const x = ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.x) || 0;\n  const y = ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.y) || 0;\n  const container = {\n    x,\n    y,\n    width: AlmostInfinity,\n    height: AlmostInfinity\n  };\n  const hyphenationCallback = node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null;\n  const layoutOptions = {\n    hyphenationCallback,\n    shrinkWhitespaceFactor\n  };\n  const lines = engine$1(attributedString, container, layoutOptions).flat();\n  return Object.assign({}, node, {\n    lines\n  });\n};\nconst layoutText$1 = (fontStore, node) => {\n  if (!node.children) return node;\n  const children = node.children.map(layoutTspan(fontStore));\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst isDefs = node => node.type === P.Defs;\nconst getDefs = node => {\n  const children = node.children || [];\n  const defs = children.find(isDefs) || {};\n  const values = defs.children || [];\n  return values.reduce((acc, value) => {\n    var _value$props;\n    const id = (_value$props = value.props) === null || _value$props === void 0 ? void 0 : _value$props.id;\n    if (id) acc[id] = value;\n    return acc;\n  }, {});\n};\n\nconst isNotDefs = node => node.type !== P.Defs;\nconst detachDefs = node => {\n  if (!node.children) return node;\n  const children = node.children.filter(isNotDefs);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst URL_REGEX = /url\\(['\"]?#([^'\"]+)['\"]?\\)/;\nconst replaceDef = (defs, value) => {\n  if (!value) return undefined;\n  if (!URL_REGEX.test(value)) return value;\n  const match = value.match(URL_REGEX);\n  return defs[match[1]];\n};\nconst parseNodeDefs = defs => node => {\n  var _node$props, _node$props2;\n  const fill = replaceDef(defs, (_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.fill);\n  const clipPath = replaceDef(defs, (_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.clipPath);\n  const props = Object.assign({}, node.props, {\n    fill,\n    clipPath\n  });\n  const children = node.children ? node.children.map(parseNodeDefs(defs)) : undefined;\n  return Object.assign({}, node, {\n    props,\n    children\n  });\n};\nconst parseDefs = root => {\n  if (!root.children) return root;\n  const defs = getDefs(root);\n  const children = root.children.map(parseNodeDefs(defs));\n  return Object.assign({}, root, {\n    children\n  });\n};\nconst replaceDefs = node => {\n  return detachDefs(parseDefs(node));\n};\n\nconst parseViewbox = value => {\n  if (!value) return null;\n  const values = value.split(/[,\\s]+/).map(parseFloat);\n  if (values.length !== 4) return null;\n  return {\n    minX: values[0],\n    minY: values[1],\n    maxX: values[2],\n    maxY: values[3]\n  };\n};\n\nconst getContainer$1 = node => {\n  const viewbox = parseViewbox(node.props.viewBox);\n  if (viewbox) {\n    return {\n      width: viewbox.maxX,\n      height: viewbox.maxY\n    };\n  }\n  if (node.props.width && node.props.height) {\n    return {\n      width: parseFloat(node.props.width),\n      height: parseFloat(node.props.height)\n    };\n  }\n  return {\n    width: 0,\n    height: 0\n  };\n};\n\nconst SVG_INHERITED_PROPS = ['x', 'y', 'clipPath', 'clipRule', 'opacity', 'fill', 'fillOpacity', 'fillRule', 'stroke', 'strokeLinecap', 'strokeLinejoin', 'strokeOpacity', 'strokeWidth', 'textAnchor', 'dominantBaseline', 'color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];\nconst getInheritProps = node => {\n  const props = node.props || {};\n  return pick(SVG_INHERITED_PROPS, props);\n};\nconst inheritProps = node => {\n  if (!node.children) return node;\n  const inheritedProps = getInheritProps(node);\n  const children = node.children.map(child => {\n    const props = Object.assign({}, inheritedProps, child.props || {});\n    const newChild = Object.assign({}, child, {\n      props\n    });\n    return inheritProps(newChild);\n  });\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst parseAspectRatio = value => {\n  const match = value.replace(/[\\s\\r\\t\\n]+/gm, ' ').replace(/^defer\\s/, '').split(' ');\n  const align = match[0] || 'xMidYMid';\n  const meetOrSlice = match[1] || 'meet';\n  return {\n    align,\n    meetOrSlice\n  };\n};\n\nconst STYLE_PROPS = ['width', 'height', 'color', 'stroke', 'strokeWidth', 'opacity', 'fillOpacity', 'strokeOpacity', 'fill', 'fillRule', 'clipPath', 'offset', 'transform', 'strokeLinejoin', 'strokeLinecap', 'strokeDasharray'];\nconst VERTICAL_PROPS = ['y', 'y1', 'y2', 'height', 'cy', 'ry'];\nconst HORIZONTAL_PROPS = ['x', 'x1', 'x2', 'width', 'cx', 'rx'];\nconst isType$3 = type => node => node.type === type;\nconst isSvg$3 = isType$3(P.Svg);\nconst isText$5 = isType$3(P.Text);\nconst isTextInstance$3 = isType$3(P.TextInstance);\nconst transformPercent = container => props => mapValues(props, (value, key) => {\n  const match = matchPercent(value);\n  if (match && VERTICAL_PROPS.includes(key)) {\n    return match.percent * container.height;\n  }\n  if (match && HORIZONTAL_PROPS.includes(key)) {\n    return match.percent * container.width;\n  }\n  return value;\n});\nconst parsePercent = value => {\n  const match = matchPercent(value);\n  return match ? match.percent : parseFloat(value);\n};\nconst parseProps = container => node => {\n  let props = transformPercent(container)(node.props);\n  props = evolve({\n    x: parseFloat,\n    x1: parseFloat,\n    x2: parseFloat,\n    y: parseFloat,\n    y1: parseFloat,\n    y2: parseFloat,\n    r: parseFloat,\n    rx: parseFloat,\n    ry: parseFloat,\n    cx: parseFloat,\n    cy: parseFloat,\n    width: parseFloat,\n    height: parseFloat,\n    offset: parsePercent,\n    fill: transformColor,\n    opacity: parsePercent,\n    stroke: transformColor,\n    stopOpacity: parsePercent,\n    stopColor: transformColor,\n    transform: processTransform\n  }, props);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst mergeStyles$1 = node => {\n  const style = node.style || {};\n  const props = Object.assign({}, style, node.props);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst removeNoneValues = node => {\n  const removeNone = value => value === 'none' ? null : value;\n  const props = mapValues(node.props, removeNone);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst pickStyleProps = node => {\n  const props = node.props || {};\n  const styleProps = pick(STYLE_PROPS, props);\n  const style = Object.assign({}, styleProps, node.style || {});\n  return Object.assign({}, node, {\n    style\n  });\n};\nconst parseSvgProps = node => {\n  const props = evolve({\n    width: parseFloat,\n    height: parseFloat,\n    viewBox: parseViewbox,\n    preserveAspectRatio: parseAspectRatio\n  }, node.props);\n  return Object.assign({}, node, {\n    props\n  });\n};\nconst wrapBetweenTspan = node => ({\n  type: P.Tspan,\n  props: {},\n  children: [node]\n});\nconst addMissingTspan = node => {\n  if (!isText$5(node)) return node;\n  if (!node.children) return node;\n  const resolveChild = child => isTextInstance$3(child) ? wrapBetweenTspan(child) : child;\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst parseText = fontStore => node => {\n  if (isText$5(node)) return layoutText$1(fontStore, node);\n  if (!node.children) return node;\n  const children = node.children.map(parseText(fontStore));\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst resolveSvgNode = container => compose(parseProps(container), addMissingTspan, removeNoneValues, mergeStyles$1);\nconst resolveChildren = container => node => {\n  if (!node.children) return node;\n  const resolveChild = compose(resolveChildren(container), resolveSvgNode(container));\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\nconst resolveSvgRoot = (node, fontStore) => {\n  const container = getContainer$1(node);\n  return compose(replaceDefs, parseText(fontStore), parseSvgProps, pickStyleProps, inheritProps, resolveChildren(container))(node);\n};\n\n/**\n * Pre-process SVG nodes so they can be rendered in the next steps\n *\n * @param {Object} node root node\n * @param {Object} fontStore font store\n * @returns {Object} root node\n */\nconst resolveSvg = (node, fontStore) => {\n  if (!node.children) return node;\n  const resolveChild = child => resolveSvg(child, fontStore);\n  const root = isSvg$3(node) ? resolveSvgRoot(node, fontStore) : node;\n  const children = root.children.map(resolveChild);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\n/* eslint-disable import/prefer-default-export */\n\nlet instancePromise;\nconst loadYoga = async () => {\n  // Yoga WASM binaries must be asynchronously compiled and loaded\n  // to prevent Event emitter memory leak warnings, Yoga must be loaded only once\n  const instance = await (instancePromise ??= loadYoga$1());\n  const config = instance.Config.create();\n  config.setPointScaleFactor(0);\n  const node = {\n    create: () => instance.Node.createWithConfig(config)\n  };\n  return {\n    node\n  };\n};\n\nconst resolveYoga = async root => {\n  const yoga = await loadYoga();\n  return Object.assign({}, root, {\n    yoga\n  });\n};\n\nconst getZIndex = node => node.style.zIndex;\nconst shouldSort = node => node.type !== P.Document && node.type !== P.Svg;\nconst sortZIndex = (a, b) => {\n  const za = getZIndex(a);\n  const zb = getZIndex(b);\n  if (!za && !zb) return 0;\n  if (!za) return 1;\n  if (!zb) return -1;\n  return zb - za;\n};\n\n/**\n * Sort children by zIndex value\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst resolveZIndex = node => {\n  if (!node.children) return node;\n  const sortedChildren = shouldSort(node) ? node.children.sort(sortZIndex) : node.children;\n  const children = sortedChildren.map(resolveZIndex);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\n/* eslint-disable no-cond-assign */\n\n// Caches emoji images data\nconst emojis = {};\nconst regex = emojiRegex();\nconst reflect = promise => function () {\n  return promise(...arguments).then(v => v, e => e);\n};\n\n// Returns a function to be able to mock resolveImage.\nconst makeFetchEmojiImage = () => reflect(resolveImage);\n\n/**\n * When an emoji as no variations, it might still have 2 parts,\n * the canonical emoji and an empty string.\n * ex.\n *   (no color) Array.from('❤️') => [\"❤\", \"️\"]\n *   (w/ color) Array.from('👍🏿') => [\"👍\", \"🏿\"]\n *\n * The empty string needs to be removed otherwise the generated\n * url will be incorect.\n */\nconst _removeVariationSelectors = x => x !== '️';\nconst getCodePoints = (string, withVariationSelectors) => Array.from(string).filter(withVariationSelectors ? () => true : _removeVariationSelectors).map(char => char.codePointAt(0).toString(16)).join('-');\nconst buildEmojiUrl = (emoji, source) => {\n  const {\n    url,\n    format,\n    builder,\n    withVariationSelectors\n  } = source;\n  if (typeof builder === 'function') {\n    return builder(getCodePoints(emoji, withVariationSelectors));\n  }\n  return `${url}${getCodePoints(emoji, withVariationSelectors)}.${format}`;\n};\nconst fetchEmojis = (string, source) => {\n  if (!source || !source.url && !source.builder) return [];\n  const promises = [];\n  Array.from(string.matchAll(regex)).forEach(match => {\n    const emoji = match[0];\n    if (!emojis[emoji] || emojis[emoji].loading) {\n      const emojiUrl = buildEmojiUrl(emoji, source);\n      emojis[emoji] = {\n        loading: true\n      };\n      const fetchEmojiImage = makeFetchEmojiImage();\n      promises.push(fetchEmojiImage({\n        uri: emojiUrl\n      }).then(image => {\n        emojis[emoji].loading = false;\n        emojis[emoji].data = image.data;\n      }));\n    }\n  });\n  return promises;\n};\nconst embedEmojis = fragments => {\n  const result = [];\n  for (let i = 0; i < fragments.length; i += 1) {\n    const fragment = fragments[i];\n    let lastIndex = 0;\n    Array.from(fragment.string.matchAll(regex)).forEach(match => {\n      const {\n        index\n      } = match;\n      const emoji = match[0];\n      const emojiSize = fragment.attributes.fontSize;\n      const chunk = fragment.string.slice(lastIndex, index + match[0].length);\n\n      // If emoji image was found, we create a new fragment with the\n      // correct attachment and object substitution character;\n      if (emojis[emoji] && emojis[emoji].data) {\n        result.push({\n          string: chunk.replace(match, String.fromCharCode(0xfffc)),\n          attributes: {\n            ...fragment.attributes,\n            attachment: {\n              width: emojiSize,\n              height: emojiSize,\n              yOffset: Math.floor(emojiSize * 0.1),\n              image: emojis[emoji].data\n            }\n          }\n        });\n      } else {\n        // If no emoji data, we try to use emojis in the font\n        result.push({\n          string: chunk,\n          attributes: fragment.attributes\n        });\n      }\n      lastIndex = index + emoji.length;\n    });\n    if (lastIndex < fragment.string.length) {\n      result.push({\n        string: fragment.string.slice(lastIndex),\n        attributes: fragment.attributes\n      });\n    }\n  }\n  return result;\n};\n\n/**\n * Get image source\n *\n * @param {Object} node image node\n * @returns {string | Object} image src\n */\nconst getSource = node => {\n  var _node$props, _node$props2, _node$props3;\n  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.src) || ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.source) || ((_node$props3 = node.props) === null || _node$props3 === void 0 ? void 0 : _node$props3.href);\n};\n\n/**\n * Resolves `src` to `@react-pdf/image` interface.\n *\n * Also it handles factories and async sources.\n *\n * @param {string | Object | Function} src\n * @returns {Promise<Object>} resolved src\n */\nconst resolveSource = async src => {\n  const source = typeof src === 'function' ? await src() : await src;\n  return typeof source === 'string' ? {\n    uri: source\n  } : source;\n};\n\n/* eslint-disable no-param-reassign */\n\n\n/**\n * Fetches image and append data to node\n * Ideally this fn should be immutable.\n *\n * @param {Object} node\n */\nconst fetchImage = async node => {\n  const src = getSource(node);\n  const {\n    cache\n  } = node.props;\n  if (!src) {\n    console.warn(false, 'Image should receive either a \"src\" or \"source\" prop');\n    return;\n  }\n  try {\n    const source = await resolveSource(src);\n    if (!source) {\n      throw new Error(`Image's \"src\" or \"source\" prop returned ${source}`);\n    }\n    node.image = await resolveImage(source, {\n      cache\n    });\n    node.image.key = source.data ? source.data.toString() : source.uri;\n  } catch (e) {\n    node.image = {\n      width: 0,\n      height: 0,\n      key: null\n    };\n    console.warn(e.message);\n  }\n};\n\nconst isImage$2 = node => node.type === P.Image;\n\n/**\n * Get all asset promises that need to be resolved\n *\n * @param {Object} fontStore font store\n * @param {Object} node root node\n * @returns {Promise<void>[]} asset promises\n */\nconst fetchAssets = (fontStore, node) => {\n  var _node$children;\n  const promises = [];\n  const listToExplore = ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.slice(0)) || [];\n  const emojiSource = fontStore ? fontStore.getEmojiSource() : null;\n  while (listToExplore.length > 0) {\n    var _n$style;\n    const n = listToExplore.shift();\n    if (isImage$2(n)) {\n      promises.push(fetchImage(n));\n    }\n    if (fontStore && (_n$style = n.style) !== null && _n$style !== void 0 && _n$style.fontFamily) {\n      promises.push(fontStore.load(n.style));\n    }\n    if (typeof n === 'string') {\n      promises.push(...fetchEmojis(n, emojiSource));\n    }\n    if (typeof n.value === 'string') {\n      promises.push(...fetchEmojis(n.value, emojiSource));\n    }\n    if (n.children) {\n      n.children.forEach(childNode => {\n        listToExplore.push(childNode);\n      });\n    }\n  }\n  return promises;\n};\n\n/**\n * Fetch image, font and emoji assets in parallel.\n * Layout process will not be resumed until promise resolves.\n *\n * @param {Object} node root node\n * @param {Object} fontStore font store\n * @returns {Promise<Object>} root node\n */\nconst resolveAssets = async (node, fontStore) => {\n  const promises = fetchAssets(fontStore, node);\n  await Promise.all(promises);\n  return node;\n};\n\nconst isLink$1 = node => node.type === P.Link;\nconst DEFAULT_LINK_STYLES = {\n  color: 'blue',\n  textDecoration: 'underline'\n};\n\n/**\n * Computes styles using stylesheet\n *\n * @param {Object} container\n * @param {Object} node document node\n * @returns {Object} computed styles\n */\nconst computeStyle = (container, node) => {\n  let baseStyle = node.style;\n  if (isLink$1(node)) {\n    baseStyle = Array.isArray(node.style) ? [DEFAULT_LINK_STYLES, ...node.style] : [DEFAULT_LINK_STYLES, node.style];\n  }\n  return stylesheet(container, baseStyle);\n};\n\n/**\n * @typedef {Function} ResolveNodeStyles\n * @param {Object} node document node\n * @returns {Object} node (and subnodes) with resolved styles\n */\n\n/**\n * Resolves node styles\n *\n * @param {Object} container\n * @returns {ResolveNodeStyles} resolve node styles\n */\nconst resolveNodeStyles = container => node => {\n  const style = computeStyle(container, node);\n  if (!node.children) return Object.assign({}, node, {\n    style\n  });\n  const children = node.children.map(resolveNodeStyles(container));\n  return Object.assign({}, node, {\n    style,\n    children\n  });\n};\n\n/**\n * Resolves page styles\n *\n * @param {Object} page document page\n * @returns {Object} document page with resolved styles\n */\nconst resolvePageStyles = page => {\n  var _page$box, _page$box2, _page$props, _page$style;\n  const dpi = 72; // Removed: page.props?.dpi || 72;\n  const width = ((_page$box = page.box) === null || _page$box === void 0 ? void 0 : _page$box.width) || page.style.width;\n  const height = ((_page$box2 = page.box) === null || _page$box2 === void 0 ? void 0 : _page$box2.height) || page.style.height;\n  const orientation = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.orientation) || 'portrait';\n  const remBase = ((_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.fontSize) || 18;\n  const container = {\n    width,\n    height,\n    orientation,\n    dpi,\n    remBase\n  };\n  return resolveNodeStyles(container)(page);\n};\n\n/**\n * Resolves document styles\n *\n * @param {Object} root document root\n * @returns {Object} document root with resolved styles\n */\nconst resolveStyles = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePageStyles);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\nconst getTransformStyle = s => node => {\n  var _node$style, _node$style2;\n  return isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style[s]) ? '50%' : (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2[s];\n};\n\n/**\n * Get node origin\n *\n * @param {Object} node\n * @returns {{ left?: number, top?: number }} node origin\n */\nconst getOrigin = node => {\n  if (!node.box) return {};\n  const {\n    left,\n    top,\n    width,\n    height\n  } = node.box;\n  const transformOriginX = getTransformStyle('transformOriginX')(node);\n  const transformOriginY = getTransformStyle('transformOriginY')(node);\n  const percentX = matchPercent(transformOriginX);\n  const percentY = matchPercent(transformOriginY);\n  const offsetX = percentX ? width * percentX.percent : transformOriginX;\n  const offsetY = percentY ? height * percentY.percent : transformOriginY;\n  return {\n    left: left + offsetX,\n    top: top + offsetY\n  };\n};\n\n/**\n * Resolve node origin\n *\n * @param {Object} node\n * @returns {Object} node with origin attribute\n */\nconst resolveNodeOrigin = node => {\n  const origin = getOrigin(node);\n  const newNode = Object.assign({}, node, {\n    origin\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(resolveNodeOrigin);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n\n/**\n * Resolve document origins\n *\n * @param {Object} root document root\n * @returns {Object} document root\n */\n\nconst resolveOrigin = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolveNodeOrigin);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\n/* eslint-disable no-plusplus */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n\nconst getBookmarkValue = title => {\n  return typeof title === 'string' ? {\n    title,\n    fit: false,\n    expanded: false\n  } : title;\n};\nconst resolveBookmarks = node => {\n  let refs = 0;\n  const children = (node.children || []).slice(0);\n  const listToExplore = children.map(value => ({\n    value,\n    parent: null\n  }));\n  while (listToExplore.length > 0) {\n    var _child$props;\n    const element = listToExplore.shift();\n    const child = element.value;\n    let parent = element.parent;\n    if ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.bookmark) {\n      var _parent;\n      const bookmark = getBookmarkValue(child.props.bookmark);\n      const ref = refs++;\n      const newHierarchy = {\n        ref,\n        parent: (_parent = parent) === null || _parent === void 0 ? void 0 : _parent.ref,\n        ...bookmark\n      };\n      child.props.bookmark = newHierarchy;\n      parent = newHierarchy;\n    }\n    if (child.children) {\n      child.children.forEach(childNode => {\n        listToExplore.push({\n          value: childNode,\n          parent\n        });\n      });\n    }\n  }\n  return node;\n};\n\nconst VALID_ORIENTATIONS = ['portrait', 'landscape'];\n\n/**\n * Get page orientation. Defaults to portrait\n *\n * @param {Object} page object\n * @returns {string} page orientation\n */\nconst getOrientation = page => {\n  var _page$props;\n  const value = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.orientation) || 'portrait';\n  return VALID_ORIENTATIONS.includes(value) ? value : 'portrait';\n};\n\n/**\n * Return true if page is landscape\n *\n * @param {Object} page instance\n * @returns {boolean} is page landscape\n */\nconst isLandscape = page => getOrientation(page) === 'landscape';\n\nconst PAGE_SIZES = {\n  '4A0': [4767.87, 6740.79],\n  '2A0': [3370.39, 4767.87],\n  A0: [2383.94, 3370.39],\n  A1: [1683.78, 2383.94],\n  A2: [1190.55, 1683.78],\n  A3: [841.89, 1190.55],\n  A4: [595.28, 841.89],\n  A5: [419.53, 595.28],\n  A6: [297.64, 419.53],\n  A7: [209.76, 297.64],\n  A8: [147.4, 209.76],\n  A9: [104.88, 147.4],\n  A10: [73.7, 104.88],\n  B0: [2834.65, 4008.19],\n  B1: [2004.09, 2834.65],\n  B2: [1417.32, 2004.09],\n  B3: [1000.63, 1417.32],\n  B4: [708.66, 1000.63],\n  B5: [498.9, 708.66],\n  B6: [354.33, 498.9],\n  B7: [249.45, 354.33],\n  B8: [175.75, 249.45],\n  B9: [124.72, 175.75],\n  B10: [87.87, 124.72],\n  C0: [2599.37, 3676.54],\n  C1: [1836.85, 2599.37],\n  C2: [1298.27, 1836.85],\n  C3: [918.43, 1298.27],\n  C4: [649.13, 918.43],\n  C5: [459.21, 649.13],\n  C6: [323.15, 459.21],\n  C7: [229.61, 323.15],\n  C8: [161.57, 229.61],\n  C9: [113.39, 161.57],\n  C10: [79.37, 113.39],\n  RA0: [2437.8, 3458.27],\n  RA1: [1729.13, 2437.8],\n  RA2: [1218.9, 1729.13],\n  RA3: [864.57, 1218.9],\n  RA4: [609.45, 864.57],\n  SRA0: [2551.18, 3628.35],\n  SRA1: [1814.17, 2551.18],\n  SRA2: [1275.59, 1814.17],\n  SRA3: [907.09, 1275.59],\n  SRA4: [637.8, 907.09],\n  EXECUTIVE: [521.86, 756.0],\n  FOLIO: [612.0, 936.0],\n  LEGAL: [612.0, 1008.0],\n  LETTER: [612.0, 792.0],\n  TABLOID: [792.0, 1224.0],\n  ID1: [153, 243]\n};\n\n/**\n * Transforms array into size object\n *\n * @param {number[]} v array\n * @returns {{ width: number, height: number }} size object with width and height\n */\nconst toSizeObject = v => ({\n  width: v[0],\n  height: v[1]\n});\n\n/**\n * Flip size object\n *\n * @param {{ width: number, height: number }} v size object\n * @returns {{ width: number, height: number }} flipped size object\n */\nconst flipSizeObject = v => ({\n  width: v.height,\n  height: v.width\n});\n\n/**\n * Adjust page size to passed DPI\n *\n * @param {{ width: number, height: number }} v size object\n * @param {number} dpi DPI\n * @returns {{ width: number, height: number }} adjusted size object\n */\nconst adjustDpi = (v, dpi) => ({\n  width: v.width ? v.width * (72 / dpi) : v.width,\n  height: v.height ? v.height * (72 / dpi) : v.height\n});\n\n/**\n * Returns size object from a given string\n *\n * @param {string} v page size string\n * @returns {{ width: number, height: number }} size object with width and height\n */\nconst getStringSize = v => {\n  return toSizeObject(PAGE_SIZES[v.toUpperCase()]);\n};\n\n/**\n * Returns size object from a single number\n *\n * @param {number} n page size number\n * @returns {{ width: number, height: number }} size object with width and height\n */\nconst getNumberSize = n => toSizeObject([n]);\n\n/**\n * Return page size in an object { width, height }\n *\n * @param {Object} page instance\n * @returns {{ width: number, height: number }} size object with width and height\n */\nconst getSize = page => {\n  var _page$props, _page$props2;\n  const value = ((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.size) || 'A4';\n  const dpi = parseFloat(((_page$props2 = page.props) === null || _page$props2 === void 0 ? void 0 : _page$props2.dpi) || 72);\n  const type = typeof value;\n\n  /**\n   * @type {{ width: number, height: number }}\n   */\n  let size;\n  if (type === 'string') {\n    size = getStringSize(value);\n  } else if (Array.isArray(value)) {\n    size = toSizeObject(value);\n    size = adjustDpi(size, dpi);\n  } else if (type === 'number') {\n    size = getNumberSize(value);\n    size = adjustDpi(size, dpi);\n  } else {\n    size = value;\n    size = adjustDpi(size, dpi);\n  }\n  return isLandscape(page) ? flipSizeObject(size) : size;\n};\n\n/**\n * Resolves page size\n *\n * @param {Object} page\n * @returns {Object} page with resolved size in style attribute\n */\nconst resolvePageSize = page => {\n  const size = getSize(page);\n  const style = flatten(page.style || {});\n  return {\n    ...page,\n    style: {\n      ...style,\n      ...size\n    }\n  };\n};\n\n/**\n * Resolves page sizes\n *\n * @param {Object} root document root\n * @returns {Object} document root with resolved page sizes\n */\nconst resolvePageSizes = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePageSize);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\nconst isFixed = node => {\n  var _node$props;\n  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.fixed) === true;\n};\n\n/**\n * Get line index at given height\n *\n * @param {Object} node\n * @param {number} height\n */\nconst lineIndexAtHeight = (node, height) => {\n  let y = 0;\n  if (!node.lines) return 0;\n  for (let i = 0; i < node.lines.length; i += 1) {\n    const line = node.lines[i];\n    if (y + line.box.height > height) return i;\n    y += line.box.height;\n  }\n  return node.lines.length;\n};\n\n/**\n * Get height for given text line index\n *\n * @param {Object} node\n * @param {number} index\n */\nconst heightAtLineIndex = (node, index) => {\n  let counter = 0;\n  if (!node.lines) return counter;\n  for (let i = 0; i < index; i += 1) {\n    const line = node.lines[i];\n    if (!line) break;\n    counter += line.box.height;\n  }\n  return counter;\n};\n\nconst getLineBreak = (node, height) => {\n  const top = get(node, ['box', 'top'], 0);\n  const widows = get(node, ['props', 'widows'], 2);\n  const orphans = get(node, ['props', 'orphans'], 2);\n  const linesQuantity = node.lines.length;\n  const slicedLine = lineIndexAtHeight(node, height - top);\n  if (slicedLine === 0) {\n    return 0;\n  }\n  if (linesQuantity < orphans) {\n    return linesQuantity;\n  }\n  if (slicedLine < orphans || linesQuantity < orphans + widows) {\n    return 0;\n  }\n  if (linesQuantity === orphans + widows) {\n    return orphans;\n  }\n  if (linesQuantity - slicedLine < widows) {\n    return linesQuantity - widows;\n  }\n  return slicedLine;\n};\n\n// Also receives contentArea in case it's needed\nconst splitText = (node, height) => {\n  const slicedLineIndex = getLineBreak(node, height);\n  const currentHeight = heightAtLineIndex(node, slicedLineIndex);\n  const nextHeight = node.box.height - currentHeight;\n  const current = Object.assign({}, node, {\n    box: {\n      ...node.box,\n      height: currentHeight,\n      borderBottomWidth: 0\n    },\n    style: {\n      ...node.style,\n      marginBottom: 0,\n      paddingBottom: 0,\n      borderBottomWidth: 0,\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    lines: node.lines.slice(0, slicedLineIndex)\n  });\n  const next = Object.assign({}, node, {\n    box: {\n      ...node.box,\n      top: 0,\n      height: nextHeight,\n      borderTopWidth: 0\n    },\n    style: {\n      ...node.style,\n      marginTop: 0,\n      paddingTop: 0,\n      borderTopWidth: 0,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    lines: node.lines.slice(slicedLineIndex)\n  });\n  return [current, next];\n};\n\nconst getTop$1 = node => {\n  var _node$box;\n  return ((_node$box = node.box) === null || _node$box === void 0 ? void 0 : _node$box.top) || 0;\n};\nconst hasFixedHeight = node => {\n  var _node$style;\n  return !isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.height);\n};\nconst splitNode = (node, height) => {\n  if (!node) return [null, null];\n  const nodeTop = getTop$1(node);\n  const current = Object.assign({}, node, {\n    box: {\n      ...node.box,\n      borderBottomWidth: 0\n    },\n    style: {\n      ...node.style,\n      marginBottom: 0,\n      paddingBottom: 0,\n      borderBottomWidth: 0,\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  });\n  current.style.height = height - nodeTop;\n  const nextHeight = hasFixedHeight(node) ? node.box.height - (height - nodeTop) : null;\n  const next = Object.assign({}, node, {\n    box: {\n      ...node.box,\n      top: 0,\n      borderTopWidth: 0\n    },\n    style: {\n      ...node.style,\n      marginTop: 0,\n      paddingTop: 0,\n      borderTopWidth: 0,\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    }\n  });\n  if (nextHeight) {\n    next.style.height = nextHeight;\n  }\n  return [current, next];\n};\n\nconst NON_WRAP_TYPES = [P.Svg, P.Note, P.Image, P.Canvas];\nconst getWrap = node => {\n  var _node$props;\n  if (NON_WRAP_TYPES.includes(node.type)) return false;\n  return isNil((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.wrap) ? true : node.props.wrap;\n};\n\nconst getComputedPadding = (node, edge) => {\n  const {\n    yogaNode\n  } = node;\n  return yogaNode ? yogaNode.getComputedPadding(edge) : null;\n};\n\n/**\n * Get Yoga computed paddings. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ paddingTop: number, paddingRight: number, paddingBottom: number, paddingLeft: number }} paddings\n */\nconst getPadding = node => {\n  const {\n    style,\n    box\n  } = node;\n  const paddingTop = getComputedPadding(node, Yoga.Edge.Top) || (box === null || box === void 0 ? void 0 : box.paddingTop) || (style === null || style === void 0 ? void 0 : style.paddingTop) || (style === null || style === void 0 ? void 0 : style.paddingVertical) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n  const paddingRight = getComputedPadding(node, Yoga.Edge.Right) || (box === null || box === void 0 ? void 0 : box.paddingRight) || (style === null || style === void 0 ? void 0 : style.paddingRight) || (style === null || style === void 0 ? void 0 : style.paddingHorizontal) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n  const paddingBottom = getComputedPadding(node, Yoga.Edge.Bottom) || (box === null || box === void 0 ? void 0 : box.paddingBottom) || (style === null || style === void 0 ? void 0 : style.paddingBottom) || (style === null || style === void 0 ? void 0 : style.paddingVertical) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n  const paddingLeft = getComputedPadding(node, Yoga.Edge.Left) || (box === null || box === void 0 ? void 0 : box.paddingLeft) || (style === null || style === void 0 ? void 0 : style.paddingLeft) || (style === null || style === void 0 ? void 0 : style.paddingHorizontal) || (style === null || style === void 0 ? void 0 : style.padding) || 0;\n  return {\n    paddingTop,\n    paddingRight,\n    paddingBottom,\n    paddingLeft\n  };\n};\n\nconst getWrapArea = page => {\n  var _page$style;\n  const {\n    paddingBottom\n  } = getPadding(page);\n  const height = (_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.height;\n  return height - paddingBottom;\n};\n\nconst getContentArea = page => {\n  var _page$style;\n  const height = (_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.height;\n  const {\n    paddingTop,\n    paddingBottom\n  } = getPadding(page);\n  return height - paddingBottom - paddingTop;\n};\n\nconst isString = value => typeof value === 'string';\nconst isNumber = value => typeof value === 'number';\nconst isFragment = value => value && value.type === Symbol.for('react.fragment');\n\n/**\n * Transforms a react element instance to internal element format.\n *\n * Can return multiple instances in the case of arrays or fragments.\n *\n * @param {Object} element React element\n * @returns {Object[]} parsed React elements\n */\nconst createInstances = element => {\n  if (!element) return [];\n  if (isString(element) || isNumber(element)) {\n    return [{\n      type: TextInstance,\n      value: `${element}`\n    }];\n  }\n  if (isFragment(element)) {\n    return createInstances(element.props.children);\n  }\n  if (Array.isArray(element)) {\n    return element.reduce((acc, el) => acc.concat(createInstances(el)), []);\n  }\n  if (!isString(element.type)) {\n    return createInstances(element.type(element.props));\n  }\n  const {\n    type,\n    props: {\n      style = {},\n      children = [],\n      ...props\n    }\n  } = element;\n  const nextChildren = castArray(children).reduce((acc, child) => acc.concat(createInstances(child)), []);\n  return [{\n    type,\n    style,\n    props,\n    box: {},\n    children: nextChildren\n  }];\n};\n\n/* eslint-disable no-continue */\n\nconst getBreak = node => {\n  var _node$props;\n  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.break) || false;\n};\nconst getMinPresenceAhead = node => {\n  var _node$props2;\n  return ((_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.minPresenceAhead) || 0;\n};\nconst getFurthestEnd = elements => Math.max(...elements.map(node => node.box.top + node.box.height));\nconst getEndOfMinPresenceAhead = child => {\n  return child.box.top + child.box.height + child.box.marginBottom + getMinPresenceAhead(child);\n};\nconst getEndOfPresence = (child, futureElements) => {\n  const afterMinPresenceAhead = getEndOfMinPresenceAhead(child);\n  const endOfFurthestFutureElement = getFurthestEnd(futureElements.filter(node => {\n    var _node$props3;\n    return !((_node$props3 = node.props) !== null && _node$props3 !== void 0 && _node$props3.fixed);\n  }));\n  return Math.min(afterMinPresenceAhead, endOfFurthestFutureElement);\n};\nconst shouldBreak = (child, futureElements, height) => {\n  var _child$props;\n  if ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.fixed) return false;\n  const shouldSplit = height < child.box.top + child.box.height;\n  const canWrap = getWrap(child);\n\n  // Calculate the y coordinate where the desired presence of the child ends\n  const endOfPresence = getEndOfPresence(child, futureElements);\n  // If the child is already at the top of the page, breaking won't improve its presence\n  // (as long as react-pdf does not support breaking into differently sized containers)\n  const breakingImprovesPresence = child.box.top > child.box.marginTop;\n  return getBreak(child) || shouldSplit && !canWrap || !shouldSplit && endOfPresence > height && breakingImprovesPresence;\n};\n\nconst IGNORABLE_CODEPOINTS = [8232,\n// LINE_SEPARATOR\n8233 // PARAGRAPH_SEPARATOR\n];\nconst buildSubsetForFont = font => IGNORABLE_CODEPOINTS.reduce((acc, codePoint) => {\n  if (font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n    return acc;\n  }\n  return [...acc, String.fromCharCode(codePoint)];\n}, []);\nconst ignoreChars = fragments => fragments.map(fragment => {\n  const charSubset = buildSubsetForFont(fragment.attributes.font);\n  const subsetRegex = new RegExp(charSubset.join('|'));\n  return {\n    string: fragment.string.replace(subsetRegex, ''),\n    attributes: fragment.attributes\n  };\n});\n\nconst PREPROCESSORS = [ignoreChars, embedEmojis];\nconst isImage$1 = node => node.type === P.Image;\nconst isTextInstance$2 = node => node.type === P.TextInstance;\n\n/**\n * Get textkit fragments of given node object\n *\n * @param {Object} fontStore font store\n * @param {Object} instance node\n * @param {string} [parentLink] parent link\n * @param {number} [level] fragment level\n * @returns {Object[]} text fragments\n */\nconst getFragments = function (fontStore, instance, parentLink, level) {\n  var _instance$props, _instance$props2;\n  if (level === void 0) {\n    level = 0;\n  }\n  if (!instance) return [{\n    string: ''\n  }];\n  let fragments = [];\n  const {\n    color = 'black',\n    direction = 'ltr',\n    fontFamily = 'Helvetica',\n    fontWeight,\n    fontStyle,\n    fontSize = 18,\n    textAlign,\n    lineHeight,\n    textDecoration,\n    textDecorationColor,\n    textDecorationStyle,\n    textTransform,\n    letterSpacing,\n    textIndent,\n    opacity,\n    verticalAlign\n  } = instance.style;\n  const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n  const font = fontFamilies.map(fontFamilyName => {\n    if (typeof fontFamilyName !== 'string') return fontFamilyName;\n    const opts = {\n      fontFamily: fontFamilyName,\n      fontWeight,\n      fontStyle\n    };\n    const obj = fontStore ? fontStore.getFont(opts) : null;\n    return obj ? obj.data : fontFamilyName;\n  });\n\n  // Don't pass main background color to textkit. Will be rendered by the render package instead\n  const backgroundColor = level === 0 ? null : instance.style.backgroundColor;\n  const attributes = {\n    font,\n    color,\n    opacity,\n    fontSize,\n    lineHeight,\n    direction,\n    verticalAlign,\n    backgroundColor,\n    indent: textIndent,\n    characterSpacing: letterSpacing,\n    strikeStyle: textDecorationStyle,\n    underlineStyle: textDecorationStyle,\n    underline: textDecoration === 'underline' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',\n    strike: textDecoration === 'line-through' || textDecoration === 'underline line-through' || textDecoration === 'line-through underline',\n    strikeColor: textDecorationColor || color,\n    underlineColor: textDecorationColor || color,\n    link: parentLink || ((_instance$props = instance.props) === null || _instance$props === void 0 ? void 0 : _instance$props.src) || ((_instance$props2 = instance.props) === null || _instance$props2 === void 0 ? void 0 : _instance$props2.href),\n    align: textAlign || (direction === 'rtl' ? 'right' : 'left')\n  };\n  for (let i = 0; i < instance.children.length; i += 1) {\n    const child = instance.children[i];\n    if (isImage$1(child)) {\n      fragments.push({\n        string: String.fromCharCode(0xfffc),\n        attributes: {\n          ...attributes,\n          attachment: {\n            width: child.style.width || fontSize,\n            height: child.style.height || fontSize,\n            image: child.image.data\n          }\n        }\n      });\n    } else if (isTextInstance$2(child)) {\n      fragments.push({\n        string: transformText(child.value, textTransform),\n        attributes\n      });\n    } else if (child) {\n      fragments.push(...getFragments(fontStore, child, attributes.link, level + 1));\n    }\n  }\n  for (let i = 0; i < PREPROCESSORS.length; i += 1) {\n    const preprocessor = PREPROCESSORS[i];\n    fragments = preprocessor(fragments);\n  }\n  return fragments;\n};\n\n/**\n * Get textkit attributed string from text node\n *\n * @param {Object} fontStore font store\n * @param {Object} instance node\n * @returns {Object} attributed string\n */\nconst getAttributedString = (fontStore, instance) => {\n  const fragments = getFragments(fontStore, instance);\n  return fromFragments(fragments);\n};\n\nconst engines = {\n  bidi,\n  linebreaker,\n  justification,\n  textDecoration,\n  scriptItemizer,\n  wordHyphenation,\n  fontSubstitution\n};\nconst engine = layoutEngine(engines);\nconst getMaxLines = node => {\n  var _node$style;\n  return (_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.maxLines;\n};\nconst getTextOverflow = node => {\n  var _node$style2;\n  return (_node$style2 = node.style) === null || _node$style2 === void 0 ? void 0 : _node$style2.textOverflow;\n};\n\n/**\n * Get layout container for specific text node\n *\n * @param {number} width\n * @param {number} height\n * @param {Object} node\n * @returns {Object} layout container\n */\nconst getContainer = (width, height, node) => {\n  const maxLines = getMaxLines(node);\n  const textOverflow = getTextOverflow(node);\n  return {\n    x: 0,\n    y: 0,\n    width,\n    maxLines,\n    height: height || Infinity,\n    truncateMode: textOverflow\n  };\n};\n\n/**\n * Get text layout options for specific text node\n *\n * @param {Object} node instance\n * @returns {Object} layout options\n */\nconst getLayoutOptions = (fontStore, node) => ({\n  hyphenationPenalty: node.props.hyphenationPenalty,\n  shrinkWhitespaceFactor: {\n    before: -0.5,\n    after: -0.5\n  },\n  hyphenationCallback: node.props.hyphenationCallback || (fontStore === null || fontStore === void 0 ? void 0 : fontStore.getHyphenationCallback()) || null\n});\n\n/**\n * Get text lines for given node\n *\n * @param {Object} node node\n * @param {number} width container width\n * @param {number} height container height\n * @param {number} fontStore font store\n * @returns {Object[]} layout lines\n */\nconst layoutText = (node, width, height, fontStore) => {\n  const attributedString = getAttributedString(fontStore, node);\n  const container = getContainer(width, height, node);\n  const options = getLayoutOptions(fontStore, node);\n  const lines = engine(attributedString, container, options);\n  return lines.reduce((acc, line) => [...acc, ...line], []);\n};\n\nconst isType$2 = type => node => node.type === type;\nconst isSvg$2 = isType$2(P.Svg);\nconst isText$4 = isType$2(P.Text);\nconst shouldIterate = node => !isSvg$2(node) && !isText$4(node);\nconst shouldLayoutText = node => isText$4(node) && !node.lines;\n\n/**\n * Performs text layout on text node if wasn't calculated before.\n * Text layout is usually performed on Yoga's layout process (via setMeasureFunc),\n * but we need to layout those nodes with fixed width and height.\n *\n * @param {Object} node\n * @returns {Object} layout node\n */\nconst resolveTextLayout = (node, fontStore) => {\n  if (shouldLayoutText(node)) {\n    const width = node.box.width - (node.box.paddingRight + node.box.paddingLeft);\n    const height = node.box.height - (node.box.paddingTop + node.box.paddingBottom);\n\n    // eslint-disable-next-line no-param-reassign\n    node.lines = layoutText(node, width, height, fontStore);\n  }\n  if (shouldIterate(node)) {\n    if (!node.children) return node;\n    const mapChild = child => resolveTextLayout(child, fontStore);\n    const children = node.children.map(mapChild);\n    return Object.assign({}, node, {\n      children\n    });\n  }\n  return node;\n};\n\nconst BASE_INHERITABLE_PROPERTIES = ['color', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'opacity', 'textDecoration', 'textTransform', 'lineHeight', 'textAlign', 'visibility', 'wordSpacing'];\nconst TEXT_INHERITABLE_PROPERTIES = [...BASE_INHERITABLE_PROPERTIES, 'backgroundColor'];\nconst isSvg$1 = node => node.type === P.Svg;\nconst isText$3 = node => node.type === P.Text;\n\n// Merge style values\nconst mergeValues = (styleName, value, inheritedValue) => {\n  switch (styleName) {\n    case 'textDecoration':\n      {\n        // merge not none and not false textDecoration values to one rule\n        return [inheritedValue, value].filter(v => v && v !== 'none').join(' ');\n      }\n    default:\n      return value;\n  }\n};\n\n// Merge inherited and node styles\nconst merge = (inheritedStyles, style) => {\n  const mergedStyles = {\n    ...inheritedStyles\n  };\n  Object.entries(style).forEach(_ref => {\n    let [styleName, value] = _ref;\n    mergedStyles[styleName] = mergeValues(styleName, value, inheritedStyles[styleName]);\n  });\n  return mergedStyles;\n};\n\n/**\n * @typedef {Function} MergeStyles\n * @param {Object} node\n * @returns {Object} node with styles merged\n */\n\n/**\n * Merges styles with node\n *\n * @param {Object} inheritedStyles style object\n * @returns {MergeStyles} merge styles function\n */\nconst mergeStyles = inheritedStyles => node => {\n  const style = merge(inheritedStyles, node.style || {});\n  return Object.assign({}, node, {\n    style\n  });\n};\n\n/**\n * Inherit style values from the root to the leafs\n *\n * @param {Object} node document root\n * @returns {Object} document root with inheritance\n *\n */\nconst resolveInheritance = node => {\n  if (isSvg$1(node)) return node;\n  if (!node.children) return node;\n  const inheritableProperties = isText$3(node) ? TEXT_INHERITABLE_PROPERTIES : BASE_INHERITABLE_PROPERTIES;\n  const inheritStyles = pick(inheritableProperties, node.style || {});\n  const resolveChild = compose(resolveInheritance, mergeStyles(inheritStyles));\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst getComputedMargin = (node, edge) => {\n  const {\n    yogaNode\n  } = node;\n  return yogaNode ? yogaNode.getComputedMargin(edge) : null;\n};\n\n/**\n * Get Yoga computed magins. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ marginTop: number, marginRight: number, marginBottom: number, marginLeft: number }} margins\n */\nconst getMargin = node => {\n  const {\n    style,\n    box\n  } = node;\n  const marginTop = getComputedMargin(node, Yoga.Edge.Top) || (box === null || box === void 0 ? void 0 : box.marginTop) || (style === null || style === void 0 ? void 0 : style.marginTop) || (style === null || style === void 0 ? void 0 : style.marginVertical) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n  const marginRight = getComputedMargin(node, Yoga.Edge.Right) || (box === null || box === void 0 ? void 0 : box.marginRight) || (style === null || style === void 0 ? void 0 : style.marginRight) || (style === null || style === void 0 ? void 0 : style.marginHorizontal) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n  const marginBottom = getComputedMargin(node, Yoga.Edge.Bottom) || (box === null || box === void 0 ? void 0 : box.marginBottom) || (style === null || style === void 0 ? void 0 : style.marginBottom) || (style === null || style === void 0 ? void 0 : style.marginVertical) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n  const marginLeft = getComputedMargin(node, Yoga.Edge.Left) || (box === null || box === void 0 ? void 0 : box.marginLeft) || (style === null || style === void 0 ? void 0 : style.marginLeft) || (style === null || style === void 0 ? void 0 : style.marginHorizontal) || (style === null || style === void 0 ? void 0 : style.margin) || 0;\n  return {\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft\n  };\n};\n\n/**\n * Get Yoga computed position. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ top: number, right: number, bottom: number, left: number }} position\n */\nconst getPosition = node => {\n  const {\n    yogaNode\n  } = node;\n  return {\n    top: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedTop()) || 0,\n    right: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedRight()) || 0,\n    bottom: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedBottom()) || 0,\n    left: (yogaNode === null || yogaNode === void 0 ? void 0 : yogaNode.getComputedLeft()) || 0\n  };\n};\n\nconst DEFAULT_DIMENSION = {\n  width: 0,\n  height: 0\n};\n\n/**\n * Get Yoga computed dimensions. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ width: number, height: number }} dimensions\n */\nconst getDimension = node => {\n  const {\n    yogaNode\n  } = node;\n  if (!yogaNode) return DEFAULT_DIMENSION;\n  return {\n    width: yogaNode.getComputedWidth(),\n    height: yogaNode.getComputedHeight()\n  };\n};\n\nconst getComputedBorder = (yogaNode, edge) => yogaNode ? yogaNode.getComputedBorder(edge) : 0;\n\n/**\n * Get Yoga computed border width. Zero otherwise\n *\n * @param {Object} node\n * @returns {{ borderTopWidth: number, borderRightWidth: number, borderBottomWidth: number, borderLeftWidth: number }} border widths\n */\nconst getBorderWidth = node => {\n  const {\n    yogaNode\n  } = node;\n  return {\n    borderTopWidth: getComputedBorder(yogaNode, Yoga.Edge.Top),\n    borderRightWidth: getComputedBorder(yogaNode, Yoga.Edge.Right),\n    borderBottomWidth: getComputedBorder(yogaNode, Yoga.Edge.Bottom),\n    borderLeftWidth: getComputedBorder(yogaNode, Yoga.Edge.Left)\n  };\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set display attribute to node's Yoga instance\n *\n * @param {string} value display\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setDisplay = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (yogaNode) {\n    yogaNode.setDisplay(value === 'none' ? Yoga.Display.None : Yoga.Display.Flex);\n  }\n  return node;\n};\n\nconst OVERFLOW = {\n  hidden: Yoga.Overflow.Hidden,\n  scroll: Yoga.Overflow.Scroll\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set overflow attribute to node's Yoga instance\n *\n * @param {string} value overflow value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setOverflow = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    const overflow = OVERFLOW[value] || Yoga.Overflow.Visible;\n    yogaNode.setOverflow(overflow);\n  }\n  return node;\n};\n\nconst FLEX_WRAP = {\n  wrap: Yoga.Wrap.Wrap,\n  'wrap-reverse': Yoga.Wrap.WrapReverse\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set flex wrap attribute to node's Yoga instance\n *\n * @param {string} value flex wrap value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setFlexWrap = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (yogaNode) {\n    const flexWrap = FLEX_WRAP[value] || Yoga.Wrap.NoWrap;\n    yogaNode.setFlexWrap(flexWrap);\n  }\n  return node;\n};\n\n/* eslint-disable no-unused-expressions */\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * @typedef {Function} YogaValueSetter\n * @param {any} value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\n\n/**\n * Set generic yoga attribute to node's Yoga instance, handing `auto`, edges and percentage cases\n *\n * @param {string} attr property\n * @param {number} [edge] edge\n * @returns {YogaValueSetter} node instance wrapper\n */\nconst setYogaValue = (attr, edge) => value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    const hasEdge = !isNil(edge);\n    const fixedMethod = `set${upperFirst(attr)}`;\n    const autoMethod = `${fixedMethod}Auto`;\n    const percentMethod = `${fixedMethod}Percent`;\n    const percent = matchPercent(value);\n    if (percent && !yogaNode[percentMethod]) {\n      throw new Error(`You can't pass percentage values to ${attr} property`);\n    }\n    if (percent) {\n      if (hasEdge) {\n        var _yogaNode$percentMeth;\n        (_yogaNode$percentMeth = yogaNode[percentMethod]) === null || _yogaNode$percentMeth === void 0 ? void 0 : _yogaNode$percentMeth.call(yogaNode, edge, percent.value);\n      } else {\n        var _yogaNode$percentMeth2;\n        (_yogaNode$percentMeth2 = yogaNode[percentMethod]) === null || _yogaNode$percentMeth2 === void 0 ? void 0 : _yogaNode$percentMeth2.call(yogaNode, percent.value);\n      }\n    } else if (value === 'auto') {\n      if (hasEdge) {\n        var _yogaNode$autoMethod;\n        (_yogaNode$autoMethod = yogaNode[autoMethod]) === null || _yogaNode$autoMethod === void 0 ? void 0 : _yogaNode$autoMethod.call(yogaNode, edge);\n      } else {\n        var _yogaNode$autoMethod2;\n        (_yogaNode$autoMethod2 = yogaNode[autoMethod]) === null || _yogaNode$autoMethod2 === void 0 ? void 0 : _yogaNode$autoMethod2.call(yogaNode);\n      }\n    } else if (hasEdge) {\n      var _yogaNode$fixedMethod;\n      (_yogaNode$fixedMethod = yogaNode[fixedMethod]) === null || _yogaNode$fixedMethod === void 0 ? void 0 : _yogaNode$fixedMethod.call(yogaNode, edge, value);\n    } else {\n      var _yogaNode$fixedMethod2;\n      (_yogaNode$fixedMethod2 = yogaNode[fixedMethod]) === null || _yogaNode$fixedMethod2 === void 0 ? void 0 : _yogaNode$fixedMethod2.call(yogaNode, value);\n    }\n  }\n  return node;\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set flex grow attribute to node's Yoga instance\n *\n * @param {number} value flex grow value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setFlexGrow = value => node => {\n  return setYogaValue('flexGrow')(value || 0)(node);\n};\n\n/**\n * Set flex basis attribute to node's Yoga instance\n *\n * @param {number} flex basis value\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setFlexBasis = setYogaValue('flexBasis');\n\nconst ALIGN = {\n  'flex-start': Yoga.Align.FlexStart,\n  center: Yoga.Align.Center,\n  'flex-end': Yoga.Align.FlexEnd,\n  stretch: Yoga.Align.Stretch,\n  baseline: Yoga.Align.Baseline,\n  'space-between': Yoga.Align.SpaceBetween,\n  'space-around': Yoga.Align.SpaceAround,\n  'space-evenly': Yoga.Align.SpaceEvenly\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * @typedef {Function} AlignSetter\n * @param {string} value align value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\n\n/**\n * Set generic align attribute to node's Yoga instance\n *\n * @param {string} attr specific align property\n * @returns {AlignSetter} align setter\n */\nconst setAlign = attr => value => node => {\n  const {\n    yogaNode\n  } = node;\n  const defaultValue = attr === 'items' ? Yoga.Align.Stretch : Yoga.Align.Auto;\n  if (yogaNode) {\n    const align = ALIGN[value] || defaultValue;\n    yogaNode[`setAlign${upperFirst(attr)}`](align);\n  }\n  return node;\n};\n\n/**\n * Set align self attribute to node's Yoga instance\n *\n * @param {string} align value\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setAlignSelf = setAlign('self');\n\n/**\n * Set align items attribute to node's Yoga instance\n *\n * @param {string} align value\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setAlignItems = setAlign('items');\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set flex shrink attribute to node's Yoga instance\n *\n * @param {number} value flex shrink value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setFlexShrink = value => node => {\n  return setYogaValue('flexShrink')(value || 1)(node);\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set aspect ratio attribute to node's Yoga instance\n *\n * @param {number} value ratio\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setAspectRatio = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setAspectRatio(value);\n  }\n  return node;\n};\n\n/**\n * Set align content attribute to node's Yoga instance\n *\n * @param {string} align value\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setAlignContent = setAlign('content');\n\nconst POSITION = {\n  absolute: Yoga.PositionType.Absolute,\n  relative: Yoga.PositionType.Relative,\n  static: Yoga.PositionType.Static\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set position type attribute to node's Yoga instance\n *\n * @param {string} value position position type\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setPositionType = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setPositionType(POSITION[value]);\n  }\n  return node;\n};\n\nconst FLEX_DIRECTIONS = {\n  row: Yoga.FlexDirection.Row,\n  'row-reverse': Yoga.FlexDirection.RowReverse,\n  'column-reverse': Yoga.FlexDirection.ColumnReverse\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param {string} value flex direction value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setFlexDirection = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (yogaNode) {\n    const flexDirection = FLEX_DIRECTIONS[value] || Yoga.FlexDirection.Column;\n    yogaNode.setFlexDirection(flexDirection);\n  }\n  return node;\n};\n\nconst JUSTIFY_CONTENT = {\n  center: Yoga.Justify.Center,\n  'flex-end': Yoga.Justify.FlexEnd,\n  'space-between': Yoga.Justify.SpaceBetween,\n  'space-around': Yoga.Justify.SpaceAround,\n  'space-evenly': Yoga.Justify.SpaceEvenly\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set justify content attribute to node's Yoga instance\n *\n * @param {string} value justify content value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setJustifyContent = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    const justifyContent = JUSTIFY_CONTENT[value] || Yoga.Justify.FlexStart;\n    yogaNode.setJustifyContent(justifyContent);\n  }\n  return node;\n};\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set margin top attribute to node's Yoga instance\n *\n * @param {number} margin margin top\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setMarginTop = setYogaValue('margin', Yoga.Edge.Top);\n\n/**\n * Set margin right attribute to node's Yoga instance\n *\n * @param {number} margin margin right\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setMarginRight = setYogaValue('margin', Yoga.Edge.Right);\n\n/**\n * Set margin bottom attribute to node's Yoga instance\n *\n * @param {number} margin margin bottom\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setMarginBottom = setYogaValue('margin', Yoga.Edge.Bottom);\n\n/**\n * Set margin left attribute to node's Yoga instance\n *\n * @param {number} margin margin left\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setMarginLeft = setYogaValue('margin', Yoga.Edge.Left);\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set padding top attribute to node's Yoga instance\n *\n * @param {number} padding padding top\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPaddingTop = setYogaValue('padding', Yoga.Edge.Top);\n\n/**\n * Set padding right attribute to node's Yoga instance\n *\n * @param {number} padding padding right\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPaddingRight = setYogaValue('padding', Yoga.Edge.Right);\n\n/**\n * Set padding bottom attribute to node's Yoga instance\n *\n * @param {number} padding padding bottom\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPaddingBottom = setYogaValue('padding', Yoga.Edge.Bottom);\n\n/**\n * Set padding left attribute to node's Yoga instance\n *\n * @param {number} padding padding left\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPaddingLeft = setYogaValue('padding', Yoga.Edge.Left);\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set border top attribute to node's Yoga instance\n *\n * @param {number} border border top width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setBorderTop = setYogaValue('border', Yoga.Edge.Top);\n\n/**\n * Set border right attribute to node's Yoga instance\n *\n * @param {number} border border right width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setBorderRight = setYogaValue('border', Yoga.Edge.Right);\n\n/**\n * Set border bottom attribute to node's Yoga instance\n *\n * @param {number} border border bottom width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setBorderBottom = setYogaValue('border', Yoga.Edge.Bottom);\n\n/**\n * Set border left attribute to node's Yoga instance\n *\n * @param {number} border border left width\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setBorderLeft = setYogaValue('border', Yoga.Edge.Left);\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set position top attribute to node's Yoga instance\n *\n * @param {number} position position top\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPositionTop = setYogaValue('position', Yoga.Edge.Top);\n\n/**\n * Set position right attribute to node's Yoga instance\n *\n * @param {number} position position right\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPositionRight = setYogaValue('position', Yoga.Edge.Right);\n\n/**\n * Set position bottom attribute to node's Yoga instance\n *\n * @param {number} position position bottom\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPositionBottom = setYogaValue('position', Yoga.Edge.Bottom);\n\n/**\n * Set position left attribute to node's Yoga instance\n *\n * @param {number} position position left\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\nconst setPositionLeft = setYogaValue('position', Yoga.Edge.Left);\n\n/**\n * Set width to node's Yoga instance\n *\n * @param {number} width\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setWidth = setYogaValue('width');\n\n/**\n * Set min width to node's Yoga instance\n *\n * @param {number} min width\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setMinWidth = setYogaValue('minWidth');\n\n/**\n * Set max width to node's Yoga instance\n *\n * @param {number} max width\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setMaxWidth = setYogaValue('maxWidth');\n\n/**\n * Set height to node's Yoga instance\n *\n * @param {number} height\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setHeight = setYogaValue('height');\n\n/**\n * Set min height to node's Yoga instance\n *\n * @param {number} min height\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setMinHeight = setYogaValue('minHeight');\n\n/**\n * Set max height to node's Yoga instance\n *\n * @param {number} max height\n * @param {Object} node instance\n * @returns {Object} node instance\n */\nconst setMaxHeight = setYogaValue('maxHeight');\n\n/**\n * @typedef {Function} NodeInstanceWrapper\n * @param {Object} node node instance\n * @returns {Object} node instance\n */\n\n/**\n * Set rowGap value to node's Yoga instance\n *\n * @param {number} value gap value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setRowGap = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setGap(Yoga.Gutter.Row, value);\n  }\n  return node;\n};\n\n/**\n * Set columnGap value to node's Yoga instance\n *\n * @param {number} value gap value\n * @returns {NodeInstanceWrapper} node instance wrapper\n */\nconst setColumnGap = value => node => {\n  const {\n    yogaNode\n  } = node;\n  if (!isNil(value) && yogaNode) {\n    yogaNode.setGap(Yoga.Gutter.Column, value);\n  }\n  return node;\n};\n\nconst getAspectRatio = viewbox => {\n  if (!viewbox) return null;\n  return (viewbox.maxX - viewbox.minX) / (viewbox.maxY - viewbox.minY);\n};\n\n/**\n * @typedef {Function} MeasureSvg\n * @param {number} width\n * @param {number} widthMode\n * @param {number} height\n * @param {number} heightMode\n * @returns {{ width: number, height: number }} svg width and height\n */\n\n/**\n * Yoga svg measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {MeasureSvg} measure svg\n */\nconst measureCanvas$1 = (page, node) => (width, widthMode, height, heightMode) => {\n  const aspectRatio = getAspectRatio(node.props.viewBox) || 1;\n  if (widthMode === Yoga.MeasureMode.Exactly || widthMode === Yoga.MeasureMode.AtMost) {\n    return {\n      width,\n      height: width / aspectRatio\n    };\n  }\n  if (heightMode === Yoga.MeasureMode.Exactly) {\n    return {\n      width: height * aspectRatio\n    };\n  }\n  return {};\n};\n\n/**\n * Get lines width (if any)\n *\n * @param {Object} node\n * @returns {number} lines width\n */\nconst linesWidth = node => {\n  if (!node.lines) return 0;\n  return Math.max(0, ...node.lines.map(line => line.xAdvance));\n};\n\n/**\n * Get lines height (if any)\n *\n * @param {Object} node\n * @returns {number} lines height\n */\nconst linesHeight = node => {\n  if (!node.lines) return -1;\n  return node.lines.reduce((acc, line) => acc + line.box.height, 0);\n};\n\n/* eslint-disable no-param-reassign */\n\nconst ALIGNMENT_FACTORS = {\n  center: 0.5,\n  right: 1\n};\n\n/**\n * @typedef {Function} MeasureText\n * @param {number} width\n * @param {number} widthMode\n * @param {number} height\n * @returns {{ width: number, height: number }} text width and height\n */\n\n/**\n * Yoga text measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Object} fontStore\n * @returns {MeasureText} measure text function\n */\nconst measureText = (page, node, fontStore) => (width, widthMode, height) => {\n  if (widthMode === Yoga.MeasureMode.Exactly) {\n    if (!node.lines) node.lines = layoutText(node, width, height, fontStore);\n    return {\n      height: linesHeight(node)\n    };\n  }\n  if (widthMode === Yoga.MeasureMode.AtMost) {\n    var _node$style;\n    const alignFactor = ALIGNMENT_FACTORS[(_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.textAlign] || 0;\n    if (!node.lines) {\n      node.lines = layoutText(node, width, height, fontStore);\n      node.alignOffset = (width - linesWidth(node)) * alignFactor; // Compensate align in variable width containers\n    }\n    return {\n      height: linesHeight(node),\n      width: Math.min(width, linesWidth(node))\n    };\n  }\n  return {};\n};\n\n/**\n * Get image ratio\n *\n * @param {Object} node image node\n * @returns {number} image ratio\n */\nconst getRatio = node => {\n  var _node$image;\n  return (_node$image = node.image) !== null && _node$image !== void 0 && _node$image.data ? node.image.width / node.image.height : 1;\n};\n\n/**\n * Checks if page has auto height\n *\n * @param {Object} page\n * @returns {boolean} is page height auto\n */\nconst isHeightAuto = page => {\n  var _page$box;\n  return isNil((_page$box = page.box) === null || _page$box === void 0 ? void 0 : _page$box.height);\n};\n\nconst SAFETY_HEIGHT$1 = 10;\n\n/**\n * @typedef {Function} MeasureImage\n * @param {number} width\n * @param {number} widthMode\n * @param {number} height\n * @param {number} heightMode\n * @returns {{ width: number, height: number }} image width and height\n */\n\n/**\n * Yoga image measure function\n *\n * @param {Object} page page\n * @param {Object} node node\n * @returns {MeasureImage} measure image\n */\nconst measureImage = (page, node) => (width, widthMode, height, heightMode) => {\n  const imageRatio = getRatio(node);\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page);\n  const pageArea = isHeightAuto(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT$1;\n\n  // Skip measure if image data not present yet\n  if (!node.image) return {\n    width: 0,\n    height: 0\n  };\n  if (widthMode === Yoga.MeasureMode.Exactly && heightMode === Yoga.MeasureMode.Undefined) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(pageArea, scaledHeight)\n    };\n  }\n  if (heightMode === Yoga.MeasureMode.Exactly && (widthMode === Yoga.MeasureMode.AtMost || widthMode === Yoga.MeasureMode.Undefined)) {\n    return {\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n  if (widthMode === Yoga.MeasureMode.Exactly && heightMode === Yoga.MeasureMode.AtMost) {\n    const scaledHeight = width / imageRatio;\n    return {\n      height: Math.min(height, pageArea, scaledHeight)\n    };\n  }\n  if (widthMode === Yoga.MeasureMode.AtMost && heightMode === Yoga.MeasureMode.AtMost) {\n    if (imageRatio > 1) {\n      return {\n        width,\n        height: Math.min(width / imageRatio, height)\n      };\n    }\n    return {\n      height,\n      width: Math.min(height * imageRatio, width)\n    };\n  }\n  return {\n    height,\n    width\n  };\n};\n\n/* eslint-disable no-param-reassign */\n\nconst SAFETY_HEIGHT = 10;\nconst getMax = values => Math.max(-Infinity, ...values);\n\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */\nconst measureCtx = () => {\n  const ctx = {};\n  const points = [];\n  const nil = () => ctx;\n  const addPoint = (x, y) => points.push([x, y]);\n  const moveTo = function () {\n    addPoint(...arguments);\n    return ctx;\n  };\n  const rect = (x, y, w, h) => {\n    addPoint(x, y);\n    addPoint(x + w, y);\n    addPoint(x, y + h);\n    addPoint(x + w, y + h);\n    return ctx;\n  };\n  const ellipse = (x, y, rx, ry) => {\n    ry = ry || rx;\n    addPoint(x - rx, y - ry);\n    addPoint(x + rx, y - ry);\n    addPoint(x + rx, y + ry);\n    addPoint(x - rx, y + ry);\n    return ctx;\n  };\n  const polygon = function () {\n    points.push(...arguments);\n    return ctx;\n  };\n\n  // Change dimensions\n  ctx.rect = rect;\n  ctx.moveTo = moveTo;\n  ctx.lineTo = moveTo;\n  ctx.circle = ellipse;\n  ctx.polygon = polygon;\n  ctx.ellipse = ellipse;\n  ctx.roundedRect = rect;\n\n  // To be implemented\n  ctx.text = nil;\n  ctx.path = nil;\n  ctx.lineWidth = nil;\n  ctx.bezierCurveTo = nil;\n  ctx.quadraticCurveTo = nil;\n  ctx.scale = nil;\n  ctx.rotate = nil;\n  ctx.translate = nil;\n\n  // These don't change dimensions\n  ctx.dash = nil;\n  ctx.clip = nil;\n  ctx.save = nil;\n  ctx.fill = nil;\n  ctx.font = nil;\n  ctx.stroke = nil;\n  ctx.lineCap = nil;\n  ctx.opacity = nil;\n  ctx.restore = nil;\n  ctx.lineJoin = nil;\n  ctx.fontSize = nil;\n  ctx.fillColor = nil;\n  ctx.miterLimit = nil;\n  ctx.strokeColor = nil;\n  ctx.fillOpacity = nil;\n  ctx.strokeOpacity = nil;\n  ctx.linearGradient = nil;\n  ctx.radialGradient = nil;\n  ctx.getWidth = () => getMax(points.map(p => p[0]));\n  ctx.getHeight = () => getMax(points.map(p => p[1]));\n  return ctx;\n};\n\n/**\n * @typedef {Function} MeasureCanvas\n * @returns {{ width: number, height: number }} canvas width and height\n */\n\n/**\n * Yoga canvas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {MeasureCanvas} measure canvas\n */\nconst measureCanvas = (page, node) => () => {\n  const imageMargin = getMargin(node);\n  const pagePadding = getPadding(page);\n  const pageArea = isHeightAuto(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT;\n  const ctx = measureCtx();\n  node.props.paint(ctx);\n  const width = ctx.getWidth();\n  const height = Math.min(pageArea, ctx.getHeight());\n  return {\n    width,\n    height\n  };\n};\n\nconst isType$1 = type => node => node.type === type;\nconst isSvg = isType$1(P.Svg);\nconst isText$2 = isType$1(P.Text);\nconst isNote = isType$1(P.Note);\nconst isPage = isType$1(P.Page);\nconst isImage = isType$1(P.Image);\nconst isCanvas = isType$1(P.Canvas);\nconst isTextInstance$1 = isType$1(P.TextInstance);\nconst setNodeHeight = node => {\n  const value = isPage(node) ? node.box.height : node.style.height;\n  return setHeight(value);\n};\n\n/**\n * Set styles valeus into yoga node before layout calculation\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst setYogaValues = node => {\n  compose(setNodeHeight(node), setWidth(node.style.width), setMinWidth(node.style.minWidth), setMaxWidth(node.style.maxWidth), setMinHeight(node.style.minHeight), setMaxHeight(node.style.maxHeight), setMarginTop(node.style.marginTop), setMarginRight(node.style.marginRight), setMarginBottom(node.style.marginBottom), setMarginLeft(node.style.marginLeft), setPaddingTop(node.style.paddingTop), setPaddingRight(node.style.paddingRight), setPaddingBottom(node.style.paddingBottom), setPaddingLeft(node.style.paddingLeft), setPositionType(node.style.position), setPositionTop(node.style.top), setPositionRight(node.style.right), setPositionBottom(node.style.bottom), setPositionLeft(node.style.left), setBorderTop(node.style.borderTopWidth), setBorderRight(node.style.borderRightWidth), setBorderBottom(node.style.borderBottomWidth), setBorderLeft(node.style.borderLeftWidth), setDisplay(node.style.display), setFlexDirection(node.style.flexDirection), setAlignSelf(node.style.alignSelf), setAlignContent(node.style.alignContent), setAlignItems(node.style.alignItems), setJustifyContent(node.style.justifyContent), setFlexWrap(node.style.flexWrap), setOverflow(node.style.overflow), setAspectRatio(node.style.aspectRatio), setFlexBasis(node.style.flexBasis), setFlexGrow(node.style.flexGrow), setFlexShrink(node.style.flexShrink), setRowGap(node.style.rowGap), setColumnGap(node.style.columnGap))(node);\n};\n\n/**\n * @typedef {Function} InsertYogaNodes\n * @param {Object} child child node\n * @returns {Object} node\n */\n\n/**\n * Inserts child into parent' yoga node\n *\n * @param {Object} parent parent\n * @returns {InsertYogaNodes} insert yoga nodes\n */\nconst insertYogaNodes = parent => child => {\n  parent.insertChild(child.yogaNode, parent.getChildCount());\n  return child;\n};\nconst setMeasureFunc = (node, page, fontStore) => {\n  const {\n    yogaNode\n  } = node;\n  if (isText$2(node)) {\n    yogaNode.setMeasureFunc(measureText(page, node, fontStore));\n  }\n  if (isImage(node)) {\n    yogaNode.setMeasureFunc(measureImage(page, node));\n  }\n  if (isCanvas(node)) {\n    yogaNode.setMeasureFunc(measureCanvas(page, node));\n  }\n  if (isSvg(node)) {\n    yogaNode.setMeasureFunc(measureCanvas$1(page, node));\n  }\n  return node;\n};\nconst isLayoutElement = node => !isText$2(node) && !isNote(node) && !isSvg(node);\n\n/**\n * @typedef {Function} CreateYogaNodes\n * @param {Object} node\n * @returns {Object} node with appended yoga node\n */\n\n/**\n * Creates and add yoga node to document tree\n * Handles measure function for text and image nodes\n *\n * @returns {CreateYogaNodes} create yoga nodes\n */\nconst createYogaNodes = (page, fontStore, yoga) => node => {\n  const yogaNode = yoga.node.create();\n  const result = Object.assign({}, node, {\n    yogaNode\n  });\n  setYogaValues(result);\n  if (isLayoutElement(node) && node.children) {\n    const resolveChild = compose(insertYogaNodes(yogaNode), createYogaNodes(page, fontStore, yoga));\n    result.children = node.children.map(resolveChild);\n  }\n  setMeasureFunc(result, page, fontStore);\n  return result;\n};\n\n/**\n * Performs yoga calculation\n *\n * @param {Object} page page node\n * @returns {Object} page node\n */\nconst calculateLayout = page => {\n  page.yogaNode.calculateLayout();\n  return page;\n};\n\n/**\n * Saves Yoga layout result into 'box' attribute of node\n *\n * @param {Object} node\n * @returns {Object} node with box data\n */\nconst persistDimensions = node => {\n  if (isTextInstance$1(node)) return node;\n  const box = Object.assign(getPadding(node), getMargin(node), getBorderWidth(node), getPosition(node), getDimension(node));\n  const newNode = Object.assign({}, node, {\n    box\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(persistDimensions);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n\n/**\n * Removes yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\nconst destroyYogaNodes = node => {\n  const newNode = Object.assign({}, node);\n  delete newNode.yogaNode;\n  if (!node.children) return newNode;\n  const children = node.children.map(destroyYogaNodes);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n\n/**\n * Free yoga node from document tree\n *\n * @param {Object} node\n * @returns {Object} node without yoga node\n */\nconst freeYogaNodes = node => {\n  if (node.yogaNode) node.yogaNode.freeRecursive();\n  return node;\n};\n\n/**\n * Calculates page object layout using Yoga.\n * Takes node values from 'box' and 'style' attributes, and persist them back into 'box'\n * Destroy yoga values at the end.\n *\n * @param {Object} page object\n * @returns {Object} page object with correct 'box' layout attributes\n */\nconst resolvePageDimensions = (page, fontStore, yoga) => {\n  if (isNil(page)) return null;\n  return compose(destroyYogaNodes, freeYogaNodes, persistDimensions, calculateLayout, createYogaNodes(page, fontStore, yoga))(page);\n};\n\n/**\n * Calculates root object layout using Yoga.\n *\n * @param {Object} node root object\n * @param {Object} fontStore font store\n * @returns {Object} root object with correct 'box' layout attributes\n */\nconst resolveDimensions = (node, fontStore) => {\n  if (!node.children) return node;\n  const resolveChild = child => resolvePageDimensions(child, fontStore, node.yoga);\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-continue */\n/* eslint-disable prefer-destructuring */\n\nconst isText$1 = node => node.type === P.Text;\n\n// Prevent splitting elements by low decimal numbers\nconst SAFETY_THRESHOLD = 0.001;\nconst assingChildren = (children, node) => Object.assign({}, node, {\n  children\n});\nconst getTop = node => {\n  var _node$box;\n  return ((_node$box = node.box) === null || _node$box === void 0 ? void 0 : _node$box.top) || 0;\n};\nconst allFixed = nodes => nodes.every(isFixed);\nconst isDynamic = node => {\n  var _node$props;\n  return !isNil((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.render);\n};\nconst relayoutPage = compose(resolveTextLayout, resolvePageDimensions, resolveInheritance, resolvePageStyles);\nconst warnUnavailableSpace = node => {\n  console.warn(`Node of type ${node.type} can't wrap between pages and it's bigger than available page height`);\n};\nconst splitNodes = (height, contentArea, nodes) => {\n  const currentChildren = [];\n  const nextChildren = [];\n  for (let i = 0; i < nodes.length; i += 1) {\n    const child = nodes[i];\n    const futureNodes = nodes.slice(i + 1);\n    const futureFixedNodes = futureNodes.filter(isFixed);\n    const nodeTop = getTop(child);\n    const nodeHeight = child.box.height;\n    const isOutside = height <= nodeTop;\n    const shouldBreak$1 = shouldBreak(child, futureNodes, height);\n    const shouldSplit = height + SAFETY_THRESHOLD < nodeTop + nodeHeight;\n    const canWrap = getWrap(child);\n    const fitsInsidePage = nodeHeight <= contentArea;\n    if (isFixed(child)) {\n      nextChildren.push(child);\n      currentChildren.push(child);\n      continue;\n    }\n    if (isOutside) {\n      const box = Object.assign({}, child.box, {\n        top: child.box.top - height\n      });\n      const next = Object.assign({}, child, {\n        box\n      });\n      nextChildren.push(next);\n      continue;\n    }\n    if (!fitsInsidePage && !canWrap) {\n      currentChildren.push(child);\n      nextChildren.push(...futureNodes);\n      warnUnavailableSpace(child);\n      break;\n    }\n    if (shouldBreak$1) {\n      const box = Object.assign({}, child.box, {\n        top: child.box.top - height\n      });\n      const props = Object.assign({}, child.props, {\n        wrap: true,\n        break: false\n      });\n      const next = Object.assign({}, child, {\n        box,\n        props\n      });\n      currentChildren.push(...futureFixedNodes);\n      nextChildren.push(next, ...futureNodes);\n      break;\n    }\n    if (shouldSplit) {\n      const [currentChild, nextChild] = split(child, height, contentArea);\n\n      // All children are moved to the next page, it doesn't make sense to show the parent on the current page\n      if (child.children.length > 0 && currentChild.children.length === 0) {\n        // But if the current page is empty then we can just include the parent on the current page\n        if (currentChildren.length === 0) {\n          currentChildren.push(child, ...futureFixedNodes);\n          nextChildren.push(...futureNodes);\n        } else {\n          const box = Object.assign({}, child.box, {\n            top: child.box.top - height\n          });\n          const next = Object.assign({}, child, {\n            box\n          });\n          currentChildren.push(...futureFixedNodes);\n          nextChildren.push(next, ...futureNodes);\n        }\n        break;\n      }\n      if (currentChild) currentChildren.push(currentChild);\n      if (nextChild) nextChildren.push(nextChild);\n      continue;\n    }\n    currentChildren.push(child);\n  }\n  return [currentChildren, nextChildren];\n};\nconst splitChildren = (height, contentArea, node) => {\n  const children = node.children || [];\n  const availableHeight = height - getTop(node);\n  return splitNodes(availableHeight, contentArea, children);\n};\nconst splitView = (node, height, contentArea) => {\n  const [currentNode, nextNode] = splitNode(node, height);\n  const [currentChilds, nextChildren] = splitChildren(height, contentArea, node);\n  return [assingChildren(currentChilds, currentNode), assingChildren(nextChildren, nextNode)];\n};\nconst split = (node, height, contentArea) => isText$1(node) ? splitText(node, height) : splitView(node, height, contentArea);\nconst shouldResolveDynamicNodes = node => {\n  const children = node.children || [];\n  return isDynamic(node) || children.some(shouldResolveDynamicNodes);\n};\nconst resolveDynamicNodes = (props, node) => {\n  const isNodeDynamic = isDynamic(node);\n\n  // Call render prop on dynamic nodes and append result to children\n  const resolveChildren = function (children) {\n    if (children === void 0) {\n      children = [];\n    }\n    if (isNodeDynamic) {\n      const res = node.props.render(props);\n      return createInstances(res).filter(Boolean).map(n => resolveDynamicNodes(props, n));\n    }\n    return children.map(c => resolveDynamicNodes(props, c));\n  };\n\n  // We reset dynamic text box so it can be computed again later on\n  const resetHeight = isNodeDynamic && isText$1(node);\n  const box = resetHeight ? {\n    ...node.box,\n    height: 0\n  } : node.box;\n  const children = resolveChildren(node.children);\n  const lines = isNodeDynamic ? null : node.lines;\n  return Object.assign({}, node, {\n    box,\n    lines,\n    children\n  });\n};\nconst resolveDynamicPage = (props, page, fontStore, yoga) => {\n  if (shouldResolveDynamicNodes(page)) {\n    const resolvedPage = resolveDynamicNodes(props, page);\n    return relayoutPage(resolvedPage, fontStore, yoga);\n  }\n  return page;\n};\nconst splitPage = (page, pageNumber, fontStore, yoga) => {\n  const wrapArea = getWrapArea(page);\n  const contentArea = getContentArea(page);\n  const dynamicPage = resolveDynamicPage({\n    pageNumber\n  }, page, fontStore, yoga);\n  const height = page.style.height;\n  const [currentChilds, nextChilds] = splitNodes(wrapArea, contentArea, dynamicPage.children);\n  const relayout = node => relayoutPage(node, fontStore, yoga);\n  const currentBox = {\n    ...page.box,\n    height\n  };\n  const currentPage = relayout(Object.assign({}, page, {\n    box: currentBox,\n    children: currentChilds\n  }));\n  if (nextChilds.length === 0 || allFixed(nextChilds)) return [currentPage, null];\n  const nextBox = omit('height', page.box);\n  const nextProps = omit('bookmark', page.props);\n  const nextPage = relayout(Object.assign({}, page, {\n    props: nextProps,\n    box: nextBox,\n    children: nextChilds\n  }));\n  return [currentPage, nextPage];\n};\nconst resolvePageIndices = (fontStore, yoga, page, pageNumber, pages) => {\n  const totalPages = pages.length;\n  const props = {\n    totalPages,\n    pageNumber: pageNumber + 1,\n    subPageNumber: page.subPageNumber + 1,\n    subPageTotalPages: page.subPageTotalPages\n  };\n  return resolveDynamicPage(props, page, fontStore, yoga);\n};\nconst assocSubPageData = subpages => {\n  return subpages.map((page, i) => ({\n    ...page,\n    subPageNumber: i,\n    subPageTotalPages: subpages.length\n  }));\n};\nconst dissocSubPageData = page => {\n  return omit(['subPageNumber', 'subPageTotalPages'], page);\n};\nconst paginate = (page, pageNumber, fontStore, yoga) => {\n  var _page$props;\n  if (!page) return [];\n  if (((_page$props = page.props) === null || _page$props === void 0 ? void 0 : _page$props.wrap) === false) return [page];\n  let splittedPage = splitPage(page, pageNumber, fontStore, yoga);\n  const pages = [splittedPage[0]];\n  let nextPage = splittedPage[1];\n  while (nextPage !== null) {\n    splittedPage = splitPage(nextPage, pageNumber + pages.length, fontStore, yoga);\n    pages.push(splittedPage[0]);\n    nextPage = splittedPage[1];\n  }\n  return pages;\n};\n\n/**\n * Performs pagination. This is the step responsible of breaking the whole document\n * into pages following pagiation rules, such as `fixed`, `break` and dynamic nodes.\n *\n * @param {Object} doc node\n * @param {Object} fontStore font store\n * @returns {Object} layout node\n */\nconst resolvePagination = (doc, fontStore) => {\n  let pages = [];\n  let pageNumber = 1;\n  for (let i = 0; i < doc.children.length; i += 1) {\n    const page = doc.children[i];\n    let subpages = paginate(page, pageNumber, fontStore, doc.yoga);\n    subpages = assocSubPageData(subpages);\n    pageNumber += subpages.length;\n    pages = pages.concat(subpages);\n  }\n  pages = pages.map(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return dissocSubPageData(resolvePageIndices(fontStore, doc.yoga, ...args));\n  });\n  return assingChildren(pages, doc);\n};\n\n/**\n * @typedef {Function} ResolvePageHorizontalPadding\n * @param {string} value padding value\n * @returns {Object} translated padding value\n */\n\n/**\n * Translates page percentage horizontal paddings in fixed ones\n *\n * @param {Object} container page container\n * @returns {ResolvePageHorizontalPadding} resolve page horizontal padding\n */\nconst resolvePageHorizontalPadding = container => value => {\n  const match = matchPercent(value);\n  return match ? match.percent * container.width : value;\n};\n\n/**\n * @typedef {Function} ResolvePageVerticalPadding\n * @param {string} padding value\n * @returns {Object} translated padding value\n */\n\n/**\n * Translates page percentage vertical paddings in fixed ones\n *\n * @param {Object} container page container\n * @returns {ResolvePageVerticalPadding} resolve page vertical padding\n */\nconst resolvePageVerticalPadding = container => value => {\n  const match = matchPercent(value);\n  return match ? match.percent * container.height : value;\n};\n\n/**\n * Translates page percentage paddings in fixed ones\n *\n * @param {Object} page\n * @returns {Object} page with fixed paddings\n */\nconst resolvePagePaddings = page => {\n  const container = page.style;\n  const style = evolve({\n    paddingTop: resolvePageVerticalPadding(container),\n    paddingLeft: resolvePageHorizontalPadding(container),\n    paddingRight: resolvePageHorizontalPadding(container),\n    paddingBottom: resolvePageVerticalPadding(container)\n  }, page.style);\n  return Object.assign({}, page, {\n    style\n  });\n};\n\n/**\n * Translates all pages percentage paddings in fixed ones\n * This has to be computed from pages calculated size and not by Yoga\n * because at this point we didn't performed pagination yet.\n *\n * @param {Object} root document root\n * @returns {Object} document root with translated page paddings\n */\nconst resolvePagesPaddings = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePagePaddings);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\n/**\n * @typedef {Function} ResolveRadius\n * @param {string | number} value border radius value\n * @returns {number} resolved radius value\n */\n\n/**\n *\n * @param {{ width: number, height: number }} container width and height\n * @returns {ResolveRadius} resolve radius function\n */\nconst resolveRadius = container => value => {\n  if (!value) return undefined;\n  const match = matchPercent(value);\n  return match ? match.percent * Math.min(container.width, container.height) : value;\n};\n\n/**\n * Transforms percent border radius into fixed values\n *\n * @param {Object} node\n * @returns {Object} node\n */\nconst resolvePercentRadius = node => {\n  const style = evolve({\n    borderTopLeftRadius: resolveRadius(node.box),\n    borderTopRightRadius: resolveRadius(node.box),\n    borderBottomRightRadius: resolveRadius(node.box),\n    borderBottomLeftRadius: resolveRadius(node.box)\n  }, node.style || {});\n  const newNode = Object.assign({}, node, {\n    style\n  });\n  if (!node.children) return newNode;\n  const children = node.children.map(resolvePercentRadius);\n  return Object.assign({}, newNode, {\n    children\n  });\n};\n\n/**\n * Transform percent height into fixed\n *\n * @param {number} height\n * @returns {number} height\n */\nconst transformHeight = (pageArea, height) => {\n  const match = matchPercent(height);\n  return match ? match.percent * pageArea : height;\n};\n\n/**\n * Get page area (height minus paddings)\n *\n * @param {Object} page\n * @returns {number} page area\n */\nconst getPageArea = page => {\n  var _page$style, _page$style2;\n  const pageHeight = page.style.height;\n  const pagePaddingTop = ((_page$style = page.style) === null || _page$style === void 0 ? void 0 : _page$style.paddingTop) || 0;\n  const pagePaddingBottom = ((_page$style2 = page.style) === null || _page$style2 === void 0 ? void 0 : _page$style2.paddingBottom) || 0;\n  return pageHeight - pagePaddingTop - pagePaddingBottom;\n};\n\n/**\n * Transform node percent height to fixed\n *\n * @param {Object} page\n * @param {Object} node\n * @returns {Object} transformed node\n */\nconst resolveNodePercentHeight = (page, node) => {\n  var _page$style3, _node$style;\n  if (isNil((_page$style3 = page.style) === null || _page$style3 === void 0 ? void 0 : _page$style3.height)) return node;\n  if (isNil((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.height)) return node;\n  const pageArea = getPageArea(page);\n  const height = transformHeight(pageArea, node.style.height);\n  const style = Object.assign({}, node.style, {\n    height\n  });\n  return Object.assign({}, node, {\n    style\n  });\n};\n\n/**\n * Transform page immediate children with percent height to fixed\n *\n * @param {Object} page\n * @returns {Object} transformed page\n */\nconst resolvePagePercentHeight = page => {\n  if (!page.children) return page;\n  const resolveChild = child => resolveNodePercentHeight(page, child);\n  const children = page.children.map(resolveChild);\n  return Object.assign({}, page, {\n    children\n  });\n};\n\n/**\n * Transform all page immediate children with percent height to fixed.\n * This is needed for computing correct dimensions on pre-pagination layout.\n *\n * @param {Object} root document root\n * @returns {Object} transformed document root\n */\nconst resolvePercentHeight = root => {\n  if (!root.children) return root;\n  const children = root.children.map(resolvePagePercentHeight);\n  return Object.assign({}, root, {\n    children\n  });\n};\n\nconst isType = type => node => node.type === type;\nconst isLink = isType(P.Link);\nconst isText = isType(P.Text);\nconst isTextInstance = isType(P.TextInstance);\n\n/**\n * Checks if node has render prop\n *\n * @param {Object} node\n * @returns {boolean} has render prop?\n */\nconst hasRenderProp = node => {\n  var _node$props;\n  return !!((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.render);\n};\n\n/**\n * Checks if node is text type (Text or TextInstance)\n *\n * @param {Object} node\n * @returns {boolean} are all children text instances?\n */\nconst isTextType = node => isText(node) || isTextInstance(node);\n\n/**\n * Checks if is tet link that needs to be wrapped in Text\n *\n * @param {Object} node\n * @returns {boolean} are all children text instances?\n */\nconst isTextLink = node => {\n  const children = node.children || [];\n\n  // Text string inside a Link\n  if (children.every(isTextInstance)) return true;\n\n  // Text node inside a Link\n  if (children.every(isText)) return false;\n  return children.every(isTextType);\n};\n\n/**\n * Wraps node children inside Text node\n *\n * @param {Object} node\n * @returns {boolean} node with intermediate Text child\n */\nconst wrapText = node => {\n  const textElement = {\n    type: P.Text,\n    props: {},\n    style: {},\n    box: {},\n    children: node.children\n  };\n  return Object.assign({}, node, {\n    children: [textElement]\n  });\n};\nconst transformLink = node => {\n  if (!isLink(node)) return node;\n\n  // If has render prop substitute the instance by a Text, that will\n  // ultimately render the inline Link via the textkit PDF renderer.\n  if (hasRenderProp(node)) return Object.assign({}, node, {\n    type: P.Text\n  });\n\n  // If is a text link (either contains Text or TextInstalce), wrap it\n  // inside a Text element so styles are applied correctly\n\n  if (isTextLink(node)) return wrapText(node);\n  return node;\n};\n\n/**\n * Transforms Link layout to correctly render text and dynamic rendered links\n *\n * @param {Object} node\n * @returns {Object} node with link substitution\n */\nconst resolveLinkSubstitution = node => {\n  if (!node.children) return node;\n  const resolveChild = compose(transformLink, resolveLinkSubstitution);\n  const children = node.children.map(resolveChild);\n  return Object.assign({}, node, {\n    children\n  });\n};\n\nconst layout = asyncCompose(resolveZIndex, resolveOrigin, resolveAssets, resolvePagination, resolveTextLayout, resolvePercentRadius, resolveDimensions, resolveSvg, resolveAssets, resolveInheritance, resolvePercentHeight, resolvePagesPaddings, resolveStyles, resolveLinkSubstitution, resolveBookmarks, resolvePageSizes, resolveYoga);\n\nexport { layout as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}