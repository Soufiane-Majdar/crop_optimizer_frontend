{"ast":null,"code":"import _objectSpread from \"/home/sofiane/Desktop/Crop Nutrition Optimizer/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/home/sofiane/Desktop/Crop Nutrition Optimizer/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"src\", \"fontWeight\", \"fontStyle\"];\nimport 'is-url';\nimport * as fontkit from 'fontkit';\n\n/* eslint-disable max-classes-per-file */\n\nconst FONT_WEIGHTS = {\n  thin: 100,\n  hairline: 100,\n  ultralight: 200,\n  extralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  demibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  extrabold: 800,\n  heavy: 900,\n  black: 900\n};\nconst fetchFont = async (src, options) => {\n  const response = await fetch(src, options);\n  const data = await response.arrayBuffer();\n  return new Uint8Array(data);\n};\nconst isDataUrl = dataUrl => {\n  const header = dataUrl.split(',')[0];\n  const hasDataPrefix = header.substring(0, 5) === 'data:';\n  const hasBase64Prefix = header.split(';')[1] === 'base64';\n  return hasDataPrefix && hasBase64Prefix;\n};\nconst resolveFontWeight = value => {\n  return typeof value === 'string' ? FONT_WEIGHTS[value] : value;\n};\nconst sortByFontWeight = (a, b) => a.fontWeight - b.fontWeight;\nclass FontSource {\n  constructor(src, fontFamily, fontStyle, fontWeight, options) {\n    this.src = src;\n    this.fontFamily = fontFamily;\n    this.fontStyle = fontStyle || 'normal';\n    this.fontWeight = fontWeight || 400;\n    this.data = null;\n    this.options = options;\n    this.loadResultPromise = null;\n  }\n  async _load() {\n    const {\n      postscriptName\n    } = this.options;\n    if (isDataUrl(this.src)) {\n      const raw = this.src.split(',')[1];\n      const uint8Array = new Uint8Array(atob(raw).split('').map(c => c.charCodeAt(0)));\n      this.data = fontkit.create(uint8Array, postscriptName);\n    } else {\n      const {\n        headers,\n        body,\n        method = 'GET'\n      } = this.options;\n      const data = await fetchFont(this.src, {\n        method,\n        body,\n        headers\n      });\n      this.data = fontkit.create(data, postscriptName);\n    }\n  }\n  async load() {\n    if (this.loadResultPromise === null) {\n      this.loadResultPromise = this._load();\n    }\n    return this.loadResultPromise;\n  }\n}\nclass Font {\n  static create(family) {\n    return new Font(family);\n  }\n  constructor(family) {\n    this.family = family;\n    this.sources = [];\n  }\n  register(_ref) {\n    let {\n        src,\n        fontWeight,\n        fontStyle\n      } = _ref,\n      options = _objectWithoutProperties(_ref, _excluded);\n    const numericFontWeight = resolveFontWeight(fontWeight);\n    this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n  }\n  resolve(descriptor) {\n    const {\n      fontWeight = 400,\n      fontStyle = 'normal'\n    } = descriptor;\n    const styleSources = this.sources.filter(s => s.fontStyle === fontStyle);\n\n    // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n    const exactFit = styleSources.find(s => s.fontWeight === fontWeight);\n    if (exactFit) return exactFit;\n    let res;\n    if (fontWeight >= 400 && fontWeight <= 500) {\n      const leftOffset = styleSources.filter(s => s.fontWeight <= fontWeight);\n      const rightOffset = styleSources.filter(s => s.fontWeight > 500);\n      const fit = styleSources.filter(s => s.fontWeight >= fontWeight && s.fontWeight < 500);\n      res = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n    }\n    const lt = styleSources.filter(s => s.fontWeight < fontWeight).sort(sortByFontWeight);\n    const gt = styleSources.filter(s => s.fontWeight > fontWeight).sort(sortByFontWeight);\n    if (fontWeight < 400) {\n      res = lt[lt.length - 1] || gt[0];\n    }\n    if (fontWeight > 500) {\n      res = gt[0] || lt[lt.length - 1];\n    }\n    if (!res) {\n      throw new Error(\"Could not resolve font for \".concat(this.family, \", fontWeight \").concat(fontWeight));\n    }\n    return res;\n  }\n}\nvar standard = ['Courier', 'Courier-Bold', 'Courier-Oblique', 'Courier-BoldOblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-Oblique', 'Helvetica-BoldOblique', 'Times-Roman', 'Times-Bold', 'Times-Italic', 'Times-BoldItalic'];\nfunction FontStore() {\n  let fonts = {};\n  let emojiSource = null;\n  let hyphenationCallback = null;\n  this.register = data => {\n    const {\n      family\n    } = data;\n    if (!fonts[family]) {\n      fonts[family] = Font.create(family);\n    }\n\n    // Bulk loading\n    if (data.fonts) {\n      for (let i = 0; i < data.fonts.length; i += 1) {\n        fonts[family].register(_objectSpread({\n          family\n        }, data.fonts[i]));\n      }\n    } else {\n      fonts[family].register(data);\n    }\n  };\n  this.registerEmojiSource = _ref => {\n    let {\n      url,\n      format = 'png',\n      builder,\n      withVariationSelectors = false\n    } = _ref;\n    emojiSource = {\n      url,\n      format,\n      builder,\n      withVariationSelectors\n    };\n  };\n  this.registerHyphenationCallback = callback => {\n    hyphenationCallback = callback;\n  };\n  this.getFont = descriptor => {\n    const {\n      fontFamily\n    } = descriptor;\n    const isStandard = standard.includes(fontFamily);\n    if (isStandard) return null;\n    if (!fonts[fontFamily]) {\n      throw new Error(\"Font family not registered: \".concat(fontFamily, \". Please register it calling Font.register() method.\"));\n    }\n    return fonts[fontFamily].resolve(descriptor);\n  };\n  this.load = async descriptor => {\n    const {\n      fontFamily\n    } = descriptor;\n    const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n    const promises = [];\n    for (let len = fontFamilies.length, i = 0; i < len; i += 1) {\n      const family = fontFamilies[i];\n      const isStandard = standard.includes(family);\n      if (isStandard) return;\n      const f = this.getFont(_objectSpread(_objectSpread({}, descriptor), {}, {\n        fontFamily: family\n      }));\n      promises.push(f.load());\n    }\n    await Promise.all(promises);\n  };\n  this.reset = () => {\n    const keys = Object.keys(fonts);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      fonts[key].data = null;\n    }\n  };\n  this.clear = () => {\n    fonts = {};\n  };\n  this.getRegisteredFonts = () => fonts;\n  this.getEmojiSource = () => emojiSource;\n  this.getHyphenationCallback = () => hyphenationCallback;\n  this.getRegisteredFontFamilies = () => Object.keys(fonts);\n}\nexport { FontStore as default };","map":{"version":3,"names":["fontkit","FONT_WEIGHTS","thin","hairline","ultralight","extralight","light","normal","medium","semibold","demibold","bold","ultrabold","extrabold","heavy","black","fetchFont","src","options","response","fetch","data","arrayBuffer","Uint8Array","isDataUrl","dataUrl","header","split","hasDataPrefix","substring","hasBase64Prefix","resolveFontWeight","value","sortByFontWeight","a","b","fontWeight","FontSource","constructor","fontFamily","fontStyle","loadResultPromise","_load","postscriptName","raw","uint8Array","atob","map","c","charCodeAt","create","headers","body","method","load","Font","family","sources","register","_ref","_objectWithoutProperties","_excluded","numericFontWeight","push","resolve","descriptor","styleSources","filter","s","exactFit","find","res","leftOffset","rightOffset","fit","length","lt","sort","gt","Error","concat","standard","FontStore","fonts","emojiSource","hyphenationCallback","i","_objectSpread","registerEmojiSource","url","format","builder","withVariationSelectors","registerHyphenationCallback","callback","getFont","isStandard","includes","fontFamilies","promises","len","f","Promise","all","reset","keys","Object","key","clear","getRegisteredFonts","getEmojiSource","getHyphenationCallback","getRegisteredFontFamilies","default"],"sources":["/home/sofiane/Desktop/Crop Nutrition Optimizer/frontend/node_modules/@react-pdf/font/lib/index.browser.js"],"sourcesContent":["import 'is-url';\nimport * as fontkit from 'fontkit';\n\n/* eslint-disable max-classes-per-file */\n\nconst FONT_WEIGHTS = {\n  thin: 100,\n  hairline: 100,\n  ultralight: 200,\n  extralight: 200,\n  light: 300,\n  normal: 400,\n  medium: 500,\n  semibold: 600,\n  demibold: 600,\n  bold: 700,\n  ultrabold: 800,\n  extrabold: 800,\n  heavy: 900,\n  black: 900\n};\nconst fetchFont = async (src, options) => {\n  const response = await fetch(src, options);\n  const data = await response.arrayBuffer();\n  return new Uint8Array(data);\n};\nconst isDataUrl = dataUrl => {\n  const header = dataUrl.split(',')[0];\n  const hasDataPrefix = header.substring(0, 5) === 'data:';\n  const hasBase64Prefix = header.split(';')[1] === 'base64';\n  return hasDataPrefix && hasBase64Prefix;\n};\nconst resolveFontWeight = value => {\n  return typeof value === 'string' ? FONT_WEIGHTS[value] : value;\n};\nconst sortByFontWeight = (a, b) => a.fontWeight - b.fontWeight;\nclass FontSource {\n  constructor(src, fontFamily, fontStyle, fontWeight, options) {\n    this.src = src;\n    this.fontFamily = fontFamily;\n    this.fontStyle = fontStyle || 'normal';\n    this.fontWeight = fontWeight || 400;\n    this.data = null;\n    this.options = options;\n    this.loadResultPromise = null;\n  }\n  async _load() {\n    const {\n      postscriptName\n    } = this.options;\n    if (isDataUrl(this.src)) {\n      const raw = this.src.split(',')[1];\n      const uint8Array = new Uint8Array(atob(raw).split('').map(c => c.charCodeAt(0)));\n      this.data = fontkit.create(uint8Array, postscriptName);\n    } else {\n      const {\n        headers,\n        body,\n        method = 'GET'\n      } = this.options;\n      const data = await fetchFont(this.src, {\n        method,\n        body,\n        headers\n      });\n      this.data = fontkit.create(data, postscriptName);\n    }\n  }\n  async load() {\n    if (this.loadResultPromise === null) {\n      this.loadResultPromise = this._load();\n    }\n    return this.loadResultPromise;\n  }\n}\nclass Font {\n  static create(family) {\n    return new Font(family);\n  }\n  constructor(family) {\n    this.family = family;\n    this.sources = [];\n  }\n  register(_ref) {\n    let {\n      src,\n      fontWeight,\n      fontStyle,\n      ...options\n    } = _ref;\n    const numericFontWeight = resolveFontWeight(fontWeight);\n    this.sources.push(new FontSource(src, this.family, fontStyle, numericFontWeight, options));\n  }\n  resolve(descriptor) {\n    const {\n      fontWeight = 400,\n      fontStyle = 'normal'\n    } = descriptor;\n    const styleSources = this.sources.filter(s => s.fontStyle === fontStyle);\n\n    // Weight resolution. https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Fallback_weights\n    const exactFit = styleSources.find(s => s.fontWeight === fontWeight);\n    if (exactFit) return exactFit;\n    let res;\n    if (fontWeight >= 400 && fontWeight <= 500) {\n      const leftOffset = styleSources.filter(s => s.fontWeight <= fontWeight);\n      const rightOffset = styleSources.filter(s => s.fontWeight > 500);\n      const fit = styleSources.filter(s => s.fontWeight >= fontWeight && s.fontWeight < 500);\n      res = fit[0] || leftOffset[leftOffset.length - 1] || rightOffset[0];\n    }\n    const lt = styleSources.filter(s => s.fontWeight < fontWeight).sort(sortByFontWeight);\n    const gt = styleSources.filter(s => s.fontWeight > fontWeight).sort(sortByFontWeight);\n    if (fontWeight < 400) {\n      res = lt[lt.length - 1] || gt[0];\n    }\n    if (fontWeight > 500) {\n      res = gt[0] || lt[lt.length - 1];\n    }\n    if (!res) {\n      throw new Error(`Could not resolve font for ${this.family}, fontWeight ${fontWeight}`);\n    }\n    return res;\n  }\n}\n\nvar standard = ['Courier', 'Courier-Bold', 'Courier-Oblique', 'Courier-BoldOblique', 'Helvetica', 'Helvetica-Bold', 'Helvetica-Oblique', 'Helvetica-BoldOblique', 'Times-Roman', 'Times-Bold', 'Times-Italic', 'Times-BoldItalic'];\n\nfunction FontStore() {\n  let fonts = {};\n  let emojiSource = null;\n  let hyphenationCallback = null;\n  this.register = data => {\n    const {\n      family\n    } = data;\n    if (!fonts[family]) {\n      fonts[family] = Font.create(family);\n    }\n\n    // Bulk loading\n    if (data.fonts) {\n      for (let i = 0; i < data.fonts.length; i += 1) {\n        fonts[family].register({\n          family,\n          ...data.fonts[i]\n        });\n      }\n    } else {\n      fonts[family].register(data);\n    }\n  };\n  this.registerEmojiSource = _ref => {\n    let {\n      url,\n      format = 'png',\n      builder,\n      withVariationSelectors = false\n    } = _ref;\n    emojiSource = {\n      url,\n      format,\n      builder,\n      withVariationSelectors\n    };\n  };\n  this.registerHyphenationCallback = callback => {\n    hyphenationCallback = callback;\n  };\n  this.getFont = descriptor => {\n    const {\n      fontFamily\n    } = descriptor;\n    const isStandard = standard.includes(fontFamily);\n    if (isStandard) return null;\n    if (!fonts[fontFamily]) {\n      throw new Error(`Font family not registered: ${fontFamily}. Please register it calling Font.register() method.`);\n    }\n    return fonts[fontFamily].resolve(descriptor);\n  };\n  this.load = async descriptor => {\n    const {\n      fontFamily\n    } = descriptor;\n    const fontFamilies = typeof fontFamily === 'string' ? [fontFamily] : [...(fontFamily || [])];\n    const promises = [];\n    for (let len = fontFamilies.length, i = 0; i < len; i += 1) {\n      const family = fontFamilies[i];\n      const isStandard = standard.includes(family);\n      if (isStandard) return;\n      const f = this.getFont({\n        ...descriptor,\n        fontFamily: family\n      });\n      promises.push(f.load());\n    }\n    await Promise.all(promises);\n  };\n  this.reset = () => {\n    const keys = Object.keys(fonts);\n    for (let i = 0; i < keys.length; i += 1) {\n      const key = keys[i];\n      fonts[key].data = null;\n    }\n  };\n  this.clear = () => {\n    fonts = {};\n  };\n  this.getRegisteredFonts = () => fonts;\n  this.getEmojiSource = () => emojiSource;\n  this.getHyphenationCallback = () => hyphenationCallback;\n  this.getRegisteredFontFamilies = () => Object.keys(fonts);\n}\n\nexport { FontStore as default };\n"],"mappings":";;;AAAA,OAAO,QAAQ;AACf,OAAO,KAAKA,OAAO,MAAM,SAAS;;AAElC;;AAEA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,GAAG;EACTC,QAAQ,EAAE,GAAG;EACbC,UAAU,EAAE,GAAG;EACfC,UAAU,EAAE,GAAG;EACfC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,MAAM,EAAE,GAAG;EACXC,QAAQ,EAAE,GAAG;EACbC,QAAQ,EAAE,GAAG;EACbC,IAAI,EAAE,GAAG;EACTC,SAAS,EAAE,GAAG;EACdC,SAAS,EAAE,GAAG;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE;AACT,CAAC;AACD,MAAMC,SAAS,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,KAAK;EACxC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAEC,OAAO,CAAC;EAC1C,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,WAAW,CAAC,CAAC;EACzC,OAAO,IAAIC,UAAU,CAACF,IAAI,CAAC;AAC7B,CAAC;AACD,MAAMG,SAAS,GAAGC,OAAO,IAAI;EAC3B,MAAMC,MAAM,GAAGD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACpC,MAAMC,aAAa,GAAGF,MAAM,CAACG,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,OAAO;EACxD,MAAMC,eAAe,GAAGJ,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ;EACzD,OAAOC,aAAa,IAAIE,eAAe;AACzC,CAAC;AACD,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;EACjC,OAAO,OAAOA,KAAK,KAAK,QAAQ,GAAG/B,YAAY,CAAC+B,KAAK,CAAC,GAAGA,KAAK;AAChE,CAAC;AACD,MAAMC,gBAAgB,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,UAAU,GAAGD,CAAC,CAACC,UAAU;AAC9D,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAACrB,GAAG,EAAEsB,UAAU,EAAEC,SAAS,EAAEJ,UAAU,EAAElB,OAAO,EAAE;IAC3D,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACsB,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,SAAS,GAAGA,SAAS,IAAI,QAAQ;IACtC,IAAI,CAACJ,UAAU,GAAGA,UAAU,IAAI,GAAG;IACnC,IAAI,CAACf,IAAI,GAAG,IAAI;IAChB,IAAI,CAACH,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACuB,iBAAiB,GAAG,IAAI;EAC/B;EACA,MAAMC,KAAKA,CAAA,EAAG;IACZ,MAAM;MACJC;IACF,CAAC,GAAG,IAAI,CAACzB,OAAO;IAChB,IAAIM,SAAS,CAAC,IAAI,CAACP,GAAG,CAAC,EAAE;MACvB,MAAM2B,GAAG,GAAG,IAAI,CAAC3B,GAAG,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAClC,MAAMkB,UAAU,GAAG,IAAItB,UAAU,CAACuB,IAAI,CAACF,GAAG,CAAC,CAACjB,KAAK,CAAC,EAAE,CAAC,CAACoB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;MAChF,IAAI,CAAC5B,IAAI,GAAGrB,OAAO,CAACkD,MAAM,CAACL,UAAU,EAAEF,cAAc,CAAC;IACxD,CAAC,MAAM;MACL,MAAM;QACJQ,OAAO;QACPC,IAAI;QACJC,MAAM,GAAG;MACX,CAAC,GAAG,IAAI,CAACnC,OAAO;MAChB,MAAMG,IAAI,GAAG,MAAML,SAAS,CAAC,IAAI,CAACC,GAAG,EAAE;QACrCoC,MAAM;QACND,IAAI;QACJD;MACF,CAAC,CAAC;MACF,IAAI,CAAC9B,IAAI,GAAGrB,OAAO,CAACkD,MAAM,CAAC7B,IAAI,EAAEsB,cAAc,CAAC;IAClD;EACF;EACA,MAAMW,IAAIA,CAAA,EAAG;IACX,IAAI,IAAI,CAACb,iBAAiB,KAAK,IAAI,EAAE;MACnC,IAAI,CAACA,iBAAiB,GAAG,IAAI,CAACC,KAAK,CAAC,CAAC;IACvC;IACA,OAAO,IAAI,CAACD,iBAAiB;EAC/B;AACF;AACA,MAAMc,IAAI,CAAC;EACT,OAAOL,MAAMA,CAACM,MAAM,EAAE;IACpB,OAAO,IAAID,IAAI,CAACC,MAAM,CAAC;EACzB;EACAlB,WAAWA,CAACkB,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAG,EAAE;EACnB;EACAC,QAAQA,CAACC,IAAI,EAAE;IACb,IAAI;QACF1C,GAAG;QACHmB,UAAU;QACVI;MAEF,CAAC,GAAGmB,IAAI;MADHzC,OAAO,GAAA0C,wBAAA,CACRD,IAAI,EAAAE,SAAA;IACR,MAAMC,iBAAiB,GAAG/B,iBAAiB,CAACK,UAAU,CAAC;IACvD,IAAI,CAACqB,OAAO,CAACM,IAAI,CAAC,IAAI1B,UAAU,CAACpB,GAAG,EAAE,IAAI,CAACuC,MAAM,EAAEhB,SAAS,EAAEsB,iBAAiB,EAAE5C,OAAO,CAAC,CAAC;EAC5F;EACA8C,OAAOA,CAACC,UAAU,EAAE;IAClB,MAAM;MACJ7B,UAAU,GAAG,GAAG;MAChBI,SAAS,GAAG;IACd,CAAC,GAAGyB,UAAU;IACd,MAAMC,YAAY,GAAG,IAAI,CAACT,OAAO,CAACU,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC5B,SAAS,KAAKA,SAAS,CAAC;;IAExE;IACA,MAAM6B,QAAQ,GAAGH,YAAY,CAACI,IAAI,CAACF,CAAC,IAAIA,CAAC,CAAChC,UAAU,KAAKA,UAAU,CAAC;IACpE,IAAIiC,QAAQ,EAAE,OAAOA,QAAQ;IAC7B,IAAIE,GAAG;IACP,IAAInC,UAAU,IAAI,GAAG,IAAIA,UAAU,IAAI,GAAG,EAAE;MAC1C,MAAMoC,UAAU,GAAGN,YAAY,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAChC,UAAU,IAAIA,UAAU,CAAC;MACvE,MAAMqC,WAAW,GAAGP,YAAY,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAChC,UAAU,GAAG,GAAG,CAAC;MAChE,MAAMsC,GAAG,GAAGR,YAAY,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAChC,UAAU,IAAIA,UAAU,IAAIgC,CAAC,CAAChC,UAAU,GAAG,GAAG,CAAC;MACtFmC,GAAG,GAAGG,GAAG,CAAC,CAAC,CAAC,IAAIF,UAAU,CAACA,UAAU,CAACG,MAAM,GAAG,CAAC,CAAC,IAAIF,WAAW,CAAC,CAAC,CAAC;IACrE;IACA,MAAMG,EAAE,GAAGV,YAAY,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAChC,UAAU,GAAGA,UAAU,CAAC,CAACyC,IAAI,CAAC5C,gBAAgB,CAAC;IACrF,MAAM6C,EAAE,GAAGZ,YAAY,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAChC,UAAU,GAAGA,UAAU,CAAC,CAACyC,IAAI,CAAC5C,gBAAgB,CAAC;IACrF,IAAIG,UAAU,GAAG,GAAG,EAAE;MACpBmC,GAAG,GAAGK,EAAE,CAACA,EAAE,CAACD,MAAM,GAAG,CAAC,CAAC,IAAIG,EAAE,CAAC,CAAC,CAAC;IAClC;IACA,IAAI1C,UAAU,GAAG,GAAG,EAAE;MACpBmC,GAAG,GAAGO,EAAE,CAAC,CAAC,CAAC,IAAIF,EAAE,CAACA,EAAE,CAACD,MAAM,GAAG,CAAC,CAAC;IAClC;IACA,IAAI,CAACJ,GAAG,EAAE;MACR,MAAM,IAAIQ,KAAK,+BAAAC,MAAA,CAA+B,IAAI,CAACxB,MAAM,mBAAAwB,MAAA,CAAgB5C,UAAU,CAAE,CAAC;IACxF;IACA,OAAOmC,GAAG;EACZ;AACF;AAEA,IAAIU,QAAQ,GAAG,CAAC,SAAS,EAAE,cAAc,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,WAAW,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,uBAAuB,EAAE,aAAa,EAAE,YAAY,EAAE,cAAc,EAAE,kBAAkB,CAAC;AAElO,SAASC,SAASA,CAAA,EAAG;EACnB,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,mBAAmB,GAAG,IAAI;EAC9B,IAAI,CAAC3B,QAAQ,GAAGrC,IAAI,IAAI;IACtB,MAAM;MACJmC;IACF,CAAC,GAAGnC,IAAI;IACR,IAAI,CAAC8D,KAAK,CAAC3B,MAAM,CAAC,EAAE;MAClB2B,KAAK,CAAC3B,MAAM,CAAC,GAAGD,IAAI,CAACL,MAAM,CAACM,MAAM,CAAC;IACrC;;IAEA;IACA,IAAInC,IAAI,CAAC8D,KAAK,EAAE;MACd,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjE,IAAI,CAAC8D,KAAK,CAACR,MAAM,EAAEW,CAAC,IAAI,CAAC,EAAE;QAC7CH,KAAK,CAAC3B,MAAM,CAAC,CAACE,QAAQ,CAAA6B,aAAA;UACpB/B;QAAM,GACHnC,IAAI,CAAC8D,KAAK,CAACG,CAAC,CAAC,CACjB,CAAC;MACJ;IACF,CAAC,MAAM;MACLH,KAAK,CAAC3B,MAAM,CAAC,CAACE,QAAQ,CAACrC,IAAI,CAAC;IAC9B;EACF,CAAC;EACD,IAAI,CAACmE,mBAAmB,GAAG7B,IAAI,IAAI;IACjC,IAAI;MACF8B,GAAG;MACHC,MAAM,GAAG,KAAK;MACdC,OAAO;MACPC,sBAAsB,GAAG;IAC3B,CAAC,GAAGjC,IAAI;IACRyB,WAAW,GAAG;MACZK,GAAG;MACHC,MAAM;MACNC,OAAO;MACPC;IACF,CAAC;EACH,CAAC;EACD,IAAI,CAACC,2BAA2B,GAAGC,QAAQ,IAAI;IAC7CT,mBAAmB,GAAGS,QAAQ;EAChC,CAAC;EACD,IAAI,CAACC,OAAO,GAAG9B,UAAU,IAAI;IAC3B,MAAM;MACJ1B;IACF,CAAC,GAAG0B,UAAU;IACd,MAAM+B,UAAU,GAAGf,QAAQ,CAACgB,QAAQ,CAAC1D,UAAU,CAAC;IAChD,IAAIyD,UAAU,EAAE,OAAO,IAAI;IAC3B,IAAI,CAACb,KAAK,CAAC5C,UAAU,CAAC,EAAE;MACtB,MAAM,IAAIwC,KAAK,gCAAAC,MAAA,CAAgCzC,UAAU,yDAAsD,CAAC;IAClH;IACA,OAAO4C,KAAK,CAAC5C,UAAU,CAAC,CAACyB,OAAO,CAACC,UAAU,CAAC;EAC9C,CAAC;EACD,IAAI,CAACX,IAAI,GAAG,MAAMW,UAAU,IAAI;IAC9B,MAAM;MACJ1B;IACF,CAAC,GAAG0B,UAAU;IACd,MAAMiC,YAAY,GAAG,OAAO3D,UAAU,KAAK,QAAQ,GAAG,CAACA,UAAU,CAAC,GAAG,CAAC,IAAIA,UAAU,IAAI,EAAE,CAAC,CAAC;IAC5F,MAAM4D,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,GAAG,GAAGF,YAAY,CAACvB,MAAM,EAAEW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,GAAG,EAAEd,CAAC,IAAI,CAAC,EAAE;MAC1D,MAAM9B,MAAM,GAAG0C,YAAY,CAACZ,CAAC,CAAC;MAC9B,MAAMU,UAAU,GAAGf,QAAQ,CAACgB,QAAQ,CAACzC,MAAM,CAAC;MAC5C,IAAIwC,UAAU,EAAE;MAChB,MAAMK,CAAC,GAAG,IAAI,CAACN,OAAO,CAAAR,aAAA,CAAAA,aAAA,KACjBtB,UAAU;QACb1B,UAAU,EAAEiB;MAAM,EACnB,CAAC;MACF2C,QAAQ,CAACpC,IAAI,CAACsC,CAAC,CAAC/C,IAAI,CAAC,CAAC,CAAC;IACzB;IACA,MAAMgD,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EAC7B,CAAC;EACD,IAAI,CAACK,KAAK,GAAG,MAAM;IACjB,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACtB,KAAK,CAAC;IAC/B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmB,IAAI,CAAC9B,MAAM,EAAEW,CAAC,IAAI,CAAC,EAAE;MACvC,MAAMqB,GAAG,GAAGF,IAAI,CAACnB,CAAC,CAAC;MACnBH,KAAK,CAACwB,GAAG,CAAC,CAACtF,IAAI,GAAG,IAAI;IACxB;EACF,CAAC;EACD,IAAI,CAACuF,KAAK,GAAG,MAAM;IACjBzB,KAAK,GAAG,CAAC,CAAC;EACZ,CAAC;EACD,IAAI,CAAC0B,kBAAkB,GAAG,MAAM1B,KAAK;EACrC,IAAI,CAAC2B,cAAc,GAAG,MAAM1B,WAAW;EACvC,IAAI,CAAC2B,sBAAsB,GAAG,MAAM1B,mBAAmB;EACvD,IAAI,CAAC2B,yBAAyB,GAAG,MAAMN,MAAM,CAACD,IAAI,CAACtB,KAAK,CAAC;AAC3D;AAEA,SAASD,SAAS,IAAI+B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}