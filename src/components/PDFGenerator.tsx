import React from 'react';
import { Page, Text, View, Document, StyleSheet, PDFDownloadLink } from '@react-pdf/renderer';
import { Recommendation, YieldData, CropType, SoilType } from '../types';

const styles = StyleSheet.create({
  page: {
    flexDirection: 'column',
    backgroundColor: '#FFFFFF',
    padding: 30,
  },
  section: {
    margin: 10,
    padding: 10,
    flexGrow: 1,
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
    color: '#166534', // green-800
  },
  subtitle: {
    fontSize: 18,
    marginBottom: 10,
    marginTop: 20,
    color: '#166534',
  },
  recommendation: {
    marginBottom: 15,
    padding: 10,
    backgroundColor: '#f0fdf4', // green-50
    borderRadius: 5,
  },
  productName: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  description: {
    fontSize: 12,
    marginBottom: 5,
  },
  dosage: {
    fontSize: 12,
    color: '#16a34a', // green-600
  },
  yieldData: {
    marginTop: 10,
    padding: 10,
    backgroundColor: '#f0fdf4',
    borderRadius: 5,
  },
  yieldText: {
    fontSize: 12,
    marginBottom: 5,
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    color: '#666666',
    fontSize: 10,
  },
});

interface PDFDocumentProps {
  recommendations: Recommendation[];
  yieldData: YieldData | null;
  soilType: string;
  cropType: string;
  cropTypes: CropType[];
  soilTypes: SoilType[];
}

const PDFDocument: React.FC<PDFDocumentProps> = ({
  recommendations,
  yieldData,
  soilType,
  cropType,
  cropTypes,
  soilTypes,
}) => {
  const getCropTypeName = (id: string) => {
    const crop = cropTypes.find(c => c.id.toString() === id);
    return crop ? crop.name : id;
  };

  const getSoilTypeName = (id: string) => {
    const soil = soilTypes.find(s => s.id === id);
    return soil ? soil.name : id;
  };

  const formatPercentage = (value: number | undefined) => {
    return value ? `${value}%` : 'N/A';
  };

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.section}>
          <Text style={styles.title}>Crop Nutrition Recommendations</Text>
          
          <Text style={styles.subtitle}>Soil and Crop Information</Text>
          <Text style={styles.description}>Soil Type: {getSoilTypeName(soilType)}</Text>
          <Text style={styles.description}>Crop Type: {getCropTypeName(cropType)}</Text>

          <Text style={styles.subtitle}>Recommendations</Text>
          {recommendations.map((rec, index) => (
            <View key={index} style={styles.recommendation}>
              <Text style={styles.productName}>{rec.product}</Text>
              <Text style={styles.description}>{rec.description}</Text>
              <Text style={styles.dosage}>Recommended Dosage: {rec.dosage}</Text>
            </View>
          ))}

          {yieldData && (
            <>
              <Text style={styles.subtitle}>Yield Analysis</Text>
              <View style={styles.yieldData}>
                <Text style={styles.yieldText}>
                  Current Yield: {formatPercentage(yieldData.current)}
                </Text>
                <Text style={styles.yieldText}>
                  Potential Yield: {formatPercentage(yieldData.potential)}
                </Text>
                <Text style={styles.yieldText}>
                  Potential Improvement: {yieldData.potential && yieldData.current ? 
                    `${(yieldData.potential - yieldData.current).toFixed(1)}%` : 'N/A'}
                </Text>
              </View>
            </>
          )}
        </View>
        <Text style={styles.footer}>
          Generated by Crop Nutrition Optimizer - {new Date().toLocaleDateString()}
        </Text>
      </Page>
    </Document>
  );
};

export const PDFDownloadButton: React.FC<PDFDocumentProps> = (props) => (
  <PDFDownloadLink
    document={<PDFDocument {...props} />}
    fileName={`crop-recommendations-${props.soilType}-${props.cropType}.pdf`}
    className="text-white hover:text-white/90 transition-colors"
  >
    {({ loading }) => loading ? 'Generating PDF...' : 'Download PDF'}
  </PDFDownloadLink>
); 